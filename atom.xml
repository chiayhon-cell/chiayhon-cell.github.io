<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chiayhon的小站</title>
  
  <subtitle>欢迎光临</subtitle>
  <link href="http://chiayhon-cell.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://chiayhon-cell.gitee.io/"/>
  <updated>2021-02-07T07:40:44.750Z</updated>
  <id>http://chiayhon-cell.gitee.io/</id>
  
  <author>
    <name>chiayhon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【其他】Java 8 新特性</title>
    <link href="http://chiayhon-cell.gitee.io/2021/02/01/%E3%80%90%E5%85%B6%E4%BB%96%E3%80%91Java-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://chiayhon-cell.gitee.io/2021/02/01/%E3%80%90%E5%85%B6%E4%BB%96%E3%80%91Java-8-%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-02-01T12:52:15.000Z</published>
    <updated>2021-02-07T07:40:44.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>java8 新特性</p><a id="more"></a><h1 id="1-lambda表达式"><a href="#1-lambda表达式" class="headerlink" title="1. lambda表达式"></a>1. lambda表达式</h1><p>语法格式：</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 操作两数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//long相乘</span></span><br><span class="line">    longFunction(<span class="number">123L</span>, <span class="number">5L</span>, (o1, o2) -&gt; o1 * o2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">longFunction</span><span class="params">(<span class="keyword">long</span> l1, <span class="keyword">long</span> l2, MYFunction&lt;Long, Long&gt; myFunction)</span> </span>&#123;</span><br><span class="line">    System.out.println(myFunction.getValue(l1, l2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 练习1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//去空格</span></span><br><span class="line">    String s = <span class="string">&quot;\t\t\t\t  字符串数据&quot;</span>;</span><br><span class="line">    System.out.println(strHandler(s, String::trim));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去除数字和字母</span></span><br><span class="line">    String s1 = <span class="string">&quot;字符串sdaf数据12sda3字符f串数据aad12dc字符sa串数dsf据&quot;</span>;</span><br><span class="line">    System.out.println(strHandler(s1, str -&gt; &#123;</span><br><span class="line">        String regex = <span class="string">&quot;\\w+|\\d+&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> str.replaceAll(regex, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//截取转换</span></span><br><span class="line">    String s2 = <span class="string">&quot;字符串数据123字符串数据fasff字符串数据werwer字符串数据133字符串数据字符串数据字符串数据字符串数据字符串数据字符串数据&quot;</span>;</span><br><span class="line">    System.out.println(strHandler(s2, str -&gt; &#123;</span><br><span class="line">        String regex = <span class="string">&quot;[A-z]+&quot;</span>;</span><br><span class="line">        String regex2 = <span class="string">&quot;\\d+&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> str.substring(<span class="number">0</span>, <span class="number">30</span>).replaceAll(regex, <span class="string">&quot;(字母)&quot;</span>).replaceAll(regex2, <span class="string">&quot;(数字)&quot;</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">strHandler</span><span class="params">(String str, StringFunction stringFunction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stringFunction.getValue(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 按工资从多到少排序，若工资相同按名字排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; userList = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">999</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">3999</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">2999</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">3999</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    userList.sort((user1, user2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (user1.getSalary() == user2.getSalary()) &#123;</span><br><span class="line">            <span class="keyword">return</span> user1.getName().compareTo(user2.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(user1.getSalary(), user2.getSalary());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(userList.toString());</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式六：方法的参数类型可以不写，java编译器可以根据上下文推断出数据类型，即“类型推断”</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (Integer i1, Integer i2) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i1 = &quot;</span> + i1 + <span class="string">&quot;,i2 = &quot;</span> + i2);</span><br><span class="line">        <span class="keyword">int</span> result = Integer.compare(i1, i2);</span><br><span class="line">        System.out.println(result &gt;= <span class="number">0</span> ? result &gt; <span class="number">0</span> ? (i1 + <span class="string">&quot;比&quot;</span> + i2 + <span class="string">&quot;大&quot;</span>) : (i1 + <span class="string">&quot;与&quot;</span> + i2 + <span class="string">&quot;相等&quot;</span>) : (i1 + <span class="string">&quot;比&quot;</span> + i2 + <span class="string">&quot;小&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(i1, i2);</span><br><span class="line">    &#125;;</span><br><span class="line">    comparator.compare(<span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式五：若是方法有多个参数的，形参括号一定要写，方法体大括号也不能省略；</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (i1, i2) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i1 = &quot;</span> + i1 + <span class="string">&quot;,i2 = &quot;</span> + i2);</span><br><span class="line">        <span class="keyword">int</span> result = Integer.compare(i1, i2);</span><br><span class="line">        System.out.println(result &gt;= <span class="number">0</span> ? result &gt; <span class="number">0</span> ? (i1 + <span class="string">&quot;比&quot;</span> + i2 + <span class="string">&quot;大&quot;</span>) : (i1 + <span class="string">&quot;与&quot;</span> + i2 + <span class="string">&quot;相等&quot;</span>) : (i1 + <span class="string">&quot;比&quot;</span> + i2 + <span class="string">&quot;小&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(i1, i2);</span><br><span class="line">    &#125;;</span><br><span class="line">    comparator.compare(<span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式四：若是只有一个参数的方法，方体体大括号可以不写</span></span><br><span class="line"><span class="comment"> * Consumer consumer  = o -&gt; System.out.println(&quot;数据&quot; + o + &quot;开始处理&quot;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer consumer = o -&gt; System.out.println(<span class="string">&quot;数据&quot;</span> + o + <span class="string">&quot;开始处理&quot;</span>);</span><br><span class="line">    consumer.accept(<span class="number">123456</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式三：若是只有一个参数的方法，括号可以不写</span></span><br><span class="line"><span class="comment"> * x -&gt; System.out.println(&quot;数据&quot; + x + &quot;开始处理&quot;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer consumer = x -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据&quot;</span> + x + <span class="string">&quot;开始处理&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="number">222</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式二：有一个参数并且无返回值的方法。</span></span><br><span class="line"><span class="comment"> * (x) -&gt; System.out.println(&quot;数据&quot; + x + &quot;开始处理&quot;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer consumer = (x) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据&quot;</span> + x + <span class="string">&quot;开始处理&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式一：无参数无返回值的方法</span></span><br><span class="line"><span class="comment"> * () -&gt; System.out.println(&quot;线程开始运行&quot;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Runnable r1 = () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程开始运行&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    r1.run();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h1 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h1><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 断言型接口：一参布尔型返回值，自定义参数类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test13</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] strings = &#123;<span class="string">&quot;badfs&quot;</span>, <span class="string">&quot;56455&quot;</span>, <span class="string">&quot;dsfsdafsd&quot;</span>, <span class="string">&quot;as5&quot;</span>, <span class="string">&quot;as&quot;</span>, <span class="string">&quot;as&quot;</span>, <span class="string">&quot;as56&quot;</span>, <span class="string">&quot;564&quot;</span>,&#125;;</span><br><span class="line">    String regex1 = <span class="string">&quot;[A-z]+&quot;</span>;</span><br><span class="line">    String regex2 = <span class="string">&quot;\\d+&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//筛选出集合中既包含字母的元素</span></span><br><span class="line">    System.out.println(filterStr(strings, s -&gt; s.matches(regex1)));</span><br><span class="line">    <span class="comment">//筛选出集合中既包含数字的元素</span></span><br><span class="line">    System.out.println(filterStr(strings, s -&gt; s.matches(regex2)));</span><br><span class="line">    <span class="comment">//筛选出集合中既包含数字有包含字母的元素</span></span><br><span class="line">    System.out.println(filterStr(strings, s -&gt; s.matches(regex1 + regex2)));</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">filterStr</span><span class="params">(String[] strings, Predicate&lt;String&gt; predicate)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(strings);</span><br><span class="line">    List&lt;String&gt; filterList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.forEach(s -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(s)) &#123;</span><br><span class="line">            filterList.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> filterList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 函数型接口：一参一返回值，自定义参数和返回值类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] strings = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;sadfsa&quot;</span>, <span class="string">&quot;sdfsaf&quot;</span>, <span class="string">&quot;sdfas&quot;</span>, <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;sdfsaf&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//返回Sting数组中a的个数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;数组中a的个数:&quot;</span> + getStringsNumber(strings, list -&gt; &#123;</span><br><span class="line">        AtomicInteger times = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        list.forEach(s -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.contains(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//字符串中每存在一个a则使个数增加1;</span></span><br><span class="line">                <span class="keyword">while</span> ((index = s.indexOf(<span class="string">&quot;a&quot;</span>, index)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    times.getAndIncrement();</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> times.intValue();</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strings:  传入的String数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> function: 对String数组的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: 操作完成返回的数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStringsNumber</span><span class="params">(String[] strings, Function&lt;List&lt;String&gt;, Integer&gt; function)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(strings);</span><br><span class="line">    <span class="keyword">return</span> function.apply(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 生产型接口:一参有返回值，自定义参数类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">5</span>;</span><br><span class="line">    System.out.println(getRamonList(number, () -&gt; &#123;</span><br><span class="line">        <span class="comment">//1-100的随机数字</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> (random.nextInt(<span class="number">100</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> number   指定个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> supplier 供应规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">getRamonList</span><span class="params">(<span class="keyword">int</span> number, Supplier&lt;Integer&gt; supplier)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">        list.add(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 消费型接口：一参无返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//购物花费</span></span><br><span class="line">    shoppingCost(<span class="number">10000</span>, money -&gt; &#123;</span><br><span class="line">        <span class="keyword">double</span> count = <span class="number">0.9</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;购物花费:&quot;</span> + money * count);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> money:    花费的钱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumer: 消费规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shoppingCost</span><span class="params">(<span class="keyword">int</span> money, Consumer&lt;Integer&gt; consumer)</span> </span>&#123;</span><br><span class="line">        consumer.accept(money);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>    </div></div><h1 id="3-方法引用与构造器引用"><a href="#3-方法引用与构造器引用" class="headerlink" title="3. 方法引用与构造器引用"></a>3. 方法引用与构造器引用</h1><h2 id="3-1-方法引用"><a href="#3-1-方法引用" class="headerlink" title="3.1 方法引用"></a>3.1 方法引用</h2><p>　　类::实例方法名使用前提：已用方法的参数列表和返回值必须和接口中定义的抽象方法保持一致。</p><p>　　对象::实例方法名使用前提：当第一个参数是实例方法的调用者第二个参数是实例方法的参数时</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式三: 对象::实例方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test16</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    Supplier&lt;String&gt; nameSupplier = user::getName;</span><br><span class="line">    Consumer&lt;String&gt; nameConsumer = user::setName;</span><br><span class="line">    nameConsumer.accept(<span class="string">&quot;李华&quot;</span>);</span><br><span class="line">    nameSupplier.get();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式二: 类::实例方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test15</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiPredicate&lt;String, String&gt; biPredicate = String::equals;</span><br><span class="line">    System.out.println(biPredicate.test(<span class="string">&quot;qq&quot;</span>, <span class="string">&quot;qq&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 语法格式一: 类::静态方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test14</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] s = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设定参数列表和返回值与Arrays.aList一致,将Arrays类已有的静态方法aList作为引用传给函数式接口引用functionction</span></span><br><span class="line">    <span class="comment">//相对于将aList方法作为Function接口中抽象方法apply的实现</span></span><br><span class="line">    Function&lt;String[], List&lt;String&gt;&gt; function = Arrays::asList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = function.apply(s);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="3-2-构造器引用"><a href="#3-2-构造器引用" class="headerlink" title="3.2 构造器引用"></a>3.2 构造器引用</h2><h2 id="3-3-数组引用"><a href="#3-3-数组引用" class="headerlink" title="3.3 数组引用"></a>3.3 数组引用</h2>     <div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 数组引用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test17</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Function&lt;Integer, String[]&gt; function = String[]::<span class="keyword">new</span>;</span><br><span class="line">    <span class="comment">//创建长度为10的数组</span></span><br><span class="line">    function.apply(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h1 id="4-Stream-API"><a href="#4-Stream-API" class="headerlink" title="4. Stream API"></a>4. Stream API</h1><h2 id="4-1-Stream的创建"><a href="#4-1-Stream的创建" class="headerlink" title="4.1 Stream的创建"></a>4.1 Stream的创建</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Stream流创建</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test18</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 通过Arrays类</span></span><br><span class="line">    User[] users = <span class="keyword">new</span> User[<span class="number">10</span>];</span><br><span class="line">    Stream&lt;User&gt; stream = Arrays.stream(users);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 通过collection类提供的stream()和parallelStream方法</span></span><br><span class="line">    ArrayList&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Stream&lt;User&gt; stream1 = list.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 通过Stream类的of方法</span></span><br><span class="line">    Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 通过无限流</span></span><br><span class="line">    Stream&lt;Integer&gt; stream3 = Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="4-2-Stream的中间操作"><a href="#4-2-Stream的中间操作" class="headerlink" title="4.2 Stream的中间操作"></a>4.2 Stream的中间操作</h2><p>　　惰性求值：</p><h3 id="4-2-1-筛选与切片"><a href="#4-2-1-筛选与切片" class="headerlink" title="4.2.1 筛选与切片"></a>4.2.1 筛选与切片</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Stream流的中间操作1:筛选和切片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test19</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) 过滤流;参数predicate为一个断言型接口</span></span><br><span class="line">    <span class="comment">// 返回由该流中与给定谓词匹配的元素组成的流。</span></span><br><span class="line">    String[] strings = &#123;<span class="string">&quot;aaa1&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;aaa3&quot;</span>, <span class="string">&quot;6ddd&quot;</span>, <span class="string">&quot;aaa6&quot;</span>&#125;;</span><br><span class="line">    Arrays.stream(strings)</span><br><span class="line">            <span class="comment">//将符合条件的元素过滤出来</span></span><br><span class="line">            .filter(s -&gt; s.contains(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">            <span class="comment">//循环输入流中的数据</span></span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stream&lt;T&gt; limit(long maxSize); 截断流;maxSize作为形参代表流应限制为的元素数</span></span><br><span class="line">    <span class="comment">// 返回由该流的元素组成的流，其长度被截断为不超过maxSize 。</span></span><br><span class="line">    Integer[] integers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    Arrays.stream(integers)</span><br><span class="line">            <span class="comment">//过滤出小于7的元素</span></span><br><span class="line">            .filter(integer -&gt; integer &lt; <span class="number">7</span>)</span><br><span class="line">            <span class="comment">//限制最大输出元素数量为2</span></span><br><span class="line">            .limit(<span class="number">2</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Stream&lt;T&gt; skip(long n); 跳过流;n为跳过的元素</span></span><br><span class="line">    <span class="comment">// 在丢弃流的前n元素之后，返回由该流的其余元素组成的流。 如果此流包含少于n元素，则将返回空流。</span></span><br><span class="line">    Integer[] integers1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    Arrays.stream(integers1)</span><br><span class="line">            <span class="comment">//过滤出小于7的元素</span></span><br><span class="line">            .filter(integer -&gt; integer &lt; <span class="number">7</span>)</span><br><span class="line">            <span class="comment">//先跳过连个流</span></span><br><span class="line">            .skip(<span class="number">2</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Stream&lt;T&gt; distinct(); 去重;跳过流;</span></span><br><span class="line">    <span class="comment">// 返回由该流的不同元素组成的流（根据Object.equals(Object) ）。</span></span><br><span class="line">    String[] strings1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;ca&quot;</span>, <span class="string">&quot;ca&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">    Arrays.stream(strings1)</span><br><span class="line">            <span class="comment">//过滤出包含a的字符串</span></span><br><span class="line">            .filter(s -&gt; s.contains(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">            <span class="comment">//去重</span></span><br><span class="line">            .distinct()</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="4-2-2-映射"><a href="#4-2-2-映射" class="headerlink" title="4.2.2 映射"></a>4.2.2 映射</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Stream流的中间操作2:映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test20</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c1&quot;</span>, <span class="string">&quot;c12&quot;</span>, <span class="string">&quot;c1234&quot;</span>, <span class="string">&quot;c12&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);要求参数为T返回值为R的方法</span></span><br><span class="line">    <span class="comment">// 返回一个流，该流包括将给定函数应用于此流的元素的结果</span></span><br><span class="line">    list.stream()</span><br><span class="line">            <span class="comment">//过滤出包含c的元素</span></span><br><span class="line">            .filter(s -&gt; s.contains(<span class="string">&quot;c&quot;</span>))</span><br><span class="line">            <span class="comment">//将s转大写形成新的映射函数</span></span><br><span class="line">            .map(String::toUpperCase)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展</span></span><br><span class="line">    Stream&lt;Stream&lt;Character&gt;&gt; c1 = list.stream()</span><br><span class="line">            <span class="comment">//过滤出包含c的元素</span></span><br><span class="line">            .filter(s -&gt; s.contains(<span class="string">&quot;c&quot;</span>))</span><br><span class="line">            <span class="comment">//将返回的流组成流组合</span></span><br><span class="line">            .map(LambdaTest::splitString);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历出每一个字符流</span></span><br><span class="line">    c1.forEach(characterStream -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始遍历输出&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历每一个字符流的数据</span></span><br><span class="line">        characterStream.forEach(System.out::println);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);要求参数为T返回值为Stream&lt;R&gt;的方法</span></span><br><span class="line">    <span class="comment">// 返回一个流，该流包括将给定函数应用于此流的元素的结果</span></span><br><span class="line">    Stream&lt;Character&gt; c = list.stream()</span><br><span class="line">            .filter(s -&gt; s.contains(<span class="string">&quot;c&quot;</span>))</span><br><span class="line">            <span class="comment">//将返回的流合并成一个流</span></span><br><span class="line">            .flatMap(LambdaTest::splitString);</span><br><span class="line">    c.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s: 传入的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 将传入的字符串分解为Character并转成流返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: Character流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">splitString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Character character : s.toCharArray()) &#123;</span><br><span class="line">        list.add(character);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="4-2-3-排序"><a href="#4-2-3-排序" class="headerlink" title="4.2.3 排序"></a>4.2.3 排序</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Stream流中间操作3:排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test21</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">22</span>, <span class="string">&quot;李华&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;李华&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">54</span>, <span class="string">&quot;李华&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;大壮&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">54</span>, <span class="string">&quot;王五&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    list.stream()</span><br><span class="line">            .map(User::getName)</span><br><span class="line">            <span class="comment">//自然排序</span></span><br><span class="line">            .sorted()</span><br><span class="line">            .forEach(s -&gt; &#123;</span><br><span class="line">                System.out.print(s + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    list.stream()</span><br><span class="line">            <span class="comment">//Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);按定制排序</span></span><br><span class="line">            <span class="comment">//按年龄从大到小排序</span></span><br><span class="line">            .sorted((o1, o2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (o1.getAge() == (o2.getAge())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="4-3-Stream的终止操作"><a href="#4-3-Stream的终止操作" class="headerlink" title="4.3 Stream的终止操作"></a>4.3 Stream的终止操作</h2><h3 id="4-3-1-查找与匹配"><a href="#4-3-1-查找与匹配" class="headerlink" title="4.3.1 查找与匹配"></a>4.3.1 查找与匹配</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Stream流终止操作1:查找与匹配</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test22</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">22</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.WORK),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">54</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.WORK),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;大壮&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.SLEEP),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">54</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">24</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.FREE)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    <span class="comment">//Optional&lt;T&gt; findFirst();返回一个Optional其中包含着本流的第一个元素，或如果流是空的返回空Optional。</span></span><br><span class="line">    Optional&lt;User&gt; optional = list.stream()</span><br><span class="line">            <span class="comment">//过滤出状态为FREE的用户</span></span><br><span class="line">            .filter(user -&gt; user.getStatus() == status.FREE)</span><br><span class="line">            <span class="comment">//找出流中第一个状态为FREE用户</span></span><br><span class="line">            .findFirst();</span><br><span class="line">    System.out.println(optional);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Optional&lt;T&gt; findAny();返回一个Optional其中包含着本流的任意一个元素，或如果流是空的返回空Optional</span></span><br><span class="line">    Optional&lt;User&gt; optional1 = list.stream()</span><br><span class="line">            <span class="comment">//过滤出状态为FREE的用户</span></span><br><span class="line">            .filter(user -&gt; user.getStatus() == status.FREE)</span><br><span class="line">            <span class="comment">//找出流中任意一个状态为FREE用户</span></span><br><span class="line">            .findAny();</span><br><span class="line">    System.out.println(optional1);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Optional&lt;User&gt; optional2 =</span><br><span class="line">            <span class="comment">//并行流</span></span><br><span class="line">            list.parallelStream()</span><br><span class="line">                    <span class="comment">//过滤出状态为FREE的用户</span></span><br><span class="line">                    .filter(user -&gt; user.getStatus() == status.FREE)</span><br><span class="line">                    <span class="comment">//找出流中任意一个状态为FREE用户</span></span><br><span class="line">                    .findAny();</span><br><span class="line">    System.out.println(optional2);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匹配</span></span><br><span class="line">    <span class="comment">//boolean allMatch(Predicate&lt;? super T&gt; predicate);</span></span><br><span class="line">    <span class="comment">//返回此流的所有元素是否与判断规则匹配</span></span><br><span class="line">    <span class="keyword">boolean</span> b = list.stream()</span><br><span class="line">            <span class="comment">//判断流中的所有元素的状态是否全为FREE</span></span><br><span class="line">            .allMatch(user -&gt; user.getStatus() == status.FREE);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//boolean anyMatch(Predicate&lt;? super T&gt; predicate);</span></span><br><span class="line">    <span class="comment">//返回此流的是否至少有一个元素与判断规则匹配</span></span><br><span class="line">    <span class="keyword">boolean</span> b1 = list.stream()</span><br><span class="line">            <span class="comment">//判断流中是否是否至少有一个元素的状态为SLEEP</span></span><br><span class="line">            .anyMatch(user -&gt; user.getStatus() == status.SLEEP);</span><br><span class="line">    System.out.println(b1);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//boolean anyMatch(Predicate&lt;? super T&gt; predicate);</span></span><br><span class="line">    <span class="comment">//返回此流的所有元素是否全都不与判断规则匹配</span></span><br><span class="line">    <span class="keyword">boolean</span> b2 = list.stream()</span><br><span class="line">            <span class="comment">//判断流中所有元素的状态是否全不为SLEEP</span></span><br><span class="line">            .noneMatch(user -&gt; user.getStatus() == status.SLEEP);</span><br><span class="line">    System.out.println(b2);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计</span></span><br><span class="line">    <span class="comment">//long count();返回流中元素的个数</span></span><br><span class="line">    <span class="keyword">long</span> count = list.stream()</span><br><span class="line">            .count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator);</span></span><br><span class="line">    <span class="comment">//根据提供的Comparator返回此流的最大元素</span></span><br><span class="line">    Optional&lt;User&gt; max = list.stream()</span><br><span class="line">            <span class="comment">//过滤出name为李华的元素</span></span><br><span class="line">            .filter(user -&gt; <span class="string">&quot;李华&quot;</span>.equals(user.getName()))</span><br><span class="line">            <span class="comment">//找出年龄最大的李华</span></span><br><span class="line">            .max(Comparator.comparingInt(User::getAge));</span><br><span class="line">    System.out.println(max);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator);</span></span><br><span class="line">    <span class="comment">//根据提供的Comparator返回此流的最小元素</span></span><br><span class="line">    Optional&lt;User&gt; min = list.stream()</span><br><span class="line">            <span class="comment">//过滤出name为李华的元素</span></span><br><span class="line">            .filter(user -&gt; <span class="string">&quot;李华&quot;</span>.equals(user.getName()))</span><br><span class="line">            <span class="comment">//找出年龄最小的李华</span></span><br><span class="line">            .min(Comparator.comparingInt(User::getAge));</span><br><span class="line">    System.out.println(min);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="4-3-2-归约"><a href="#4-3-2-归约" class="headerlink" title="4.3.2 归约"></a>4.3.2 归约</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Stream流终止操作2:归约</span></span><br><span class="line"><span class="comment"> * T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</span></span><br><span class="line"><span class="comment"> * 使用提供的初始值和与之关联的累加函数对此流的元素进行归约</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test23</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    Integer reduce = list.stream()</span><br><span class="line">            .reduce(<span class="number">0</span>, (integer, integer2) -&gt; integer + integer2);</span><br><span class="line">    System.out.println(<span class="string">&quot;集合总和:&quot;</span> + reduce);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map-reduce模式:因谷歌用于网络搜索而出名</span></span><br><span class="line">    List&lt;User&gt; list1 = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">22</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">2000</span>, status.WORK),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">54</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">3000</span>, status.WORK),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;大壮&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">4000</span>, status.SLEEP),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">54</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">5000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">6000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">24</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">8000</span>, status.FREE)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算工资总和</span></span><br><span class="line">    Optional&lt;Double&gt; reduce1 = list1.stream()</span><br><span class="line">            .map(User::getSalary)</span><br><span class="line">            .reduce(Double::sum);</span><br><span class="line">    System.out.println(<span class="string">&quot;工资总和:&quot;</span> + reduce1.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="4-3-3-收集"><a href="#4-3-3-收集" class="headerlink" title="4.3.3 收集"></a>4.3.3 收集</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  </span></span><br><span class="line"><span class="comment"> * &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector);</span></span><br><span class="line"><span class="comment"> * 将流中的元素转换成其他形式.能够接受一个Collector的实现,用于给Stream流中的元素做汇总方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test24</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">12</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">1000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">13</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">2000</span>, status.WORK),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">54</span>, <span class="string">&quot;李华&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">3000</span>, status.WORK),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;大壮&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">4000</span>, status.SLEEP),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">54</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">5000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">23</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">6000</span>, status.FREE),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">24</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">8000</span>, status.FREE)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用List集合收集</span></span><br><span class="line">    List&lt;Double&gt; collect = list.stream()</span><br><span class="line">            .map(User::getSalary)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">&quot;工资的集合为:&quot;</span>);</span><br><span class="line">    collect.forEach(aDouble -&gt; System.out.print(aDouble + <span class="string">&quot; &quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用set集合收集并去重</span></span><br><span class="line">    Set&lt;String&gt; collect1 = list.stream()</span><br><span class="line">            .map(User::getName)</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line">    System.out.println(<span class="string">&quot;名字的非重复集合为:&quot;</span>);</span><br><span class="line">    collect1.forEach(s -&gt; System.out.print(s + <span class="string">&quot; &quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;\n=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用指定集合收集</span></span><br><span class="line">    HashSet&lt;String&gt; collect2 = list.stream()</span><br><span class="line">            .map(User::getName)</span><br><span class="line">            .collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;用指定集合收集元素:&quot;</span>);</span><br><span class="line">    collect2.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用java提供的收集器Collectors完成数值操作</span></span><br><span class="line">    <span class="comment">//总数</span></span><br><span class="line">    Long collect3 = list.stream()</span><br><span class="line">            .collect(Collectors.counting());</span><br><span class="line">    System.out.println(<span class="string">&quot;流中元素总个数:&quot;</span> + collect3);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//平均值</span></span><br><span class="line">    Double collect4 = list.stream()</span><br><span class="line">            .collect(Collectors.averagingDouble(User::getSalary));</span><br><span class="line">    System.out.println(<span class="string">&quot;所有用户工资平均值:&quot;</span> + collect4);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总和</span></span><br><span class="line">    Double collect5 = list.stream()</span><br><span class="line">            .collect(Collectors.summingDouble(User::getSalary));</span><br><span class="line">    System.out.println(<span class="string">&quot;工资总和:&quot;</span> + collect5);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最值</span></span><br><span class="line">    <span class="comment">//最高工资的用户</span></span><br><span class="line">    Optional&lt;User&gt; collect6 = list.stream()</span><br><span class="line">            .collect(Collectors.maxBy(Comparator.comparingDouble(User::getSalary)));</span><br><span class="line">    <span class="comment">//最低工资</span></span><br><span class="line">    Optional&lt;Double&gt; collect7 = list.stream()</span><br><span class="line">            .map(User::getSalary)</span><br><span class="line">            .collect(Collectors.minBy(Double::compare));</span><br><span class="line">    System.out.println(<span class="string">&quot;最高工资员工信息:&quot;</span> + collect6.get() + <span class="string">&quot; , 最低工资:&quot;</span> + collect7.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Map&lt;status, List&lt;User&gt;&gt; collect8 = list.stream()</span><br><span class="line">            <span class="comment">//按状态分组</span></span><br><span class="line">            .collect(Collectors.groupingBy(User::getStatus));</span><br><span class="line">    System.out.println(collect8);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多级分组</span></span><br><span class="line">    Map&lt;status, Map&lt;String, List&lt;User&gt;&gt;&gt; collect9 = list.stream()</span><br><span class="line">            <span class="comment">//第一级分组按照状态分</span></span><br><span class="line">            .collect(Collectors.groupingBy(User::getStatus,</span><br><span class="line">                    <span class="comment">//第二级分组按照年龄分</span></span><br><span class="line">                    Collectors.groupingBy(s -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.getAge() &lt; <span class="number">18</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;青少年&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.getAge() &lt; <span class="number">50</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;中壮年&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;老年&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)));</span><br><span class="line">    System.out.println(collect9);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分区:满足条件的一个区,不满足的另一个区</span></span><br><span class="line">    Map&lt;Boolean, List&lt;User&gt;&gt; collect10 = list.stream()</span><br><span class="line">            .collect(Collectors.partitioningBy(o -&gt; o.getSalary() &gt; <span class="number">4000</span>));</span><br><span class="line">    System.out.println(collect10);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计器</span></span><br><span class="line">    DoubleSummaryStatistics collect11 = list.stream()</span><br><span class="line">            .collect(Collectors.summarizingDouble(User::getSalary));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;工资平均值:&quot;</span> + collect11.getAverage());</span><br><span class="line">    System.out.println(<span class="string">&quot;工资总和:&quot;</span> + collect11.getSum());</span><br><span class="line">    System.out.println(<span class="string">&quot;工资份数:&quot;</span> + collect11.getCount());</span><br><span class="line">    System.out.println(<span class="string">&quot;工资最大值:&quot;</span> + collect11.getMax());</span><br><span class="line">    System.out.println(<span class="string">&quot;工资最小值:&quot;</span> + collect11.getMin());</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拼接</span></span><br><span class="line">    String collect12 = list.stream()</span><br><span class="line">            <span class="comment">//收集名字</span></span><br><span class="line">            .map(User::getName)</span><br><span class="line">            .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;名字拼接:\n(&quot;</span>, <span class="string">&quot;)&quot;</span>));</span><br><span class="line">    System.out.println(collect12);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h1 id="5-接口中的默认方法"><a href="#5-接口中的默认方法" class="headerlink" title="5. 接口中的默认方法"></a>5. 接口中的默认方法</h1><h1 id="6-新时间日期API"><a href="#6-新时间日期API" class="headerlink" title="6. 新时间日期API"></a>6. 新时间日期API</h1><h1 id="7-其他新特性"><a href="#7-其他新特性" class="headerlink" title="7. 其他新特性"></a>7. 其他新特性</h1><p><a href="https://www.cnblogs.com/kingsonfu/p/11009574.html">Optional</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;java8 新特性&lt;/p&gt;</summary>
    
    
    
    
    <category term="JAVA SE" scheme="http://chiayhon-cell.gitee.io/tags/JAVA-SE/"/>
    
  </entry>
  
  <entry>
    <title>【集合】ArrayList详解</title>
    <link href="http://chiayhon-cell.gitee.io/2021/01/29/%E3%80%90%E9%9B%86%E5%90%88%E3%80%91ArrayList%E8%AF%A6%E8%A7%A3/"/>
    <id>http://chiayhon-cell.gitee.io/2021/01/29/%E3%80%90%E9%9B%86%E5%90%88%E3%80%91ArrayList%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-01-29T12:03:00.000Z</published>
    <updated>2021-02-04T11:54:33.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><a id="more"></a><h1 id="1-ArrayList底层数据结构"><a href="#1-ArrayList底层数据结构" class="headerlink" title="1. ArrayList底层数据结构"></a>1. ArrayList底层数据结构</h1><div class='spoiler collapsed'>    <div class='spoiler-title'>        Arraylist文档注释    </div>    <div class='spoiler-content'>        <p>　　<code>List</code>接口的可调整大小的数组实现。 实现所有可选的<code>List</code>操作，并允许所有元素，包括null 。 除了实现<code>List</code>接口之外，此类还提供一些方法来操纵内部用于存储<code>List</code>的数组的大小。 （此类与<code>Vector</code>大致等效，但它是不同步的。）<br><code>　　size</code> ， <code>isEmpty</code> ， <code>get</code> ， <code>set</code> ， <code>iterator</code>和<code>listIterator</code>操作在常数时间内运行。 加法运算以摊销的固定时间运行，即，添加n个元素需要<code>O（n）</code>时间。 所有其他操作均以线性时间运行（大致而言）。 与<code>LinkedList</code>实现相比，常数因子较低。<br>　　每个<code>ArrayList</code>实例都有一个容量。 容量是用于在该<code>List</code>中存储元素的数组的大小。 它总是至少与该<code>List</code>大小一样大。 将元素添加到<code>ArrayList</code>后，其容量会自动增长。 除了添加元素具有固定的摊销时间成本外，没有指定增长策略的详细信息。<br>　　应用程序可以使用<code>sureCapacity</code>操作在添加大量元素之前增加<code>ArrayList</code>实例的容量。 这可以减少增量重新分配的数量。<br>　　请注意，此实现未同步。 如果多个线程同时访问<code>ArrayList</code>实例，并且至少有一个线程在结构上修改该<code>List</code>，则必须在外部进行同步。 （结构修改是添加或删除一个或多个元素或显式调整后备数组大小的任何操作；仅设置元素的值不是结构修改。）这通常是通过在自然封装该该<code>List</code>的某个对象上进行同步来实现的。 如果不存在这样的对象，则应使用<code>Collections</code>.<code>synchronizedList</code>方法“包装”该<code>List</code>。 最好在创建时完成此操作，以防止意外的不同步访问该<code>List</code>：</p><pre><code> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList(...));</span><br></pre></td></tr></table></figure></code></pre><p>　　此类的<code>iterator</code>和<code>listIterator</code>方法返回的iterator是<code>fail—fast</code> (快速失败)的：如果在创建迭代器之后的任何时间以任何方式对该<code>List</code>进行结构修改，则除了通过迭代器自己的<code>remove</code>或add方法之外，迭代器都会抛出<code>ConcurrentModificationException</code> 。 因此，面对并发修改，迭代器会快速干净地失败，而不会在未来的不确定时间冒着任意，不确定的行为的风险。<br>　　请注意，迭代器的快速失败行为无法得到保证，因为通常来说，在存在不同步的并发修改的情况下，不可能做出任何严格的保证。 快速失败的迭代器会尽最大努力抛出<code>ConcurrentModificationException</code> 。 因此，编写依赖于此异常的程序的正确性是错误的：迭代器的快速失败行为应仅用于检测错误。<br>　　此类是<code>Java Collections Framework</code>的成员。</p>    </div></div><h2 id="1-1-ArrayList集合介绍"><a href="#1-1-ArrayList集合介绍" class="headerlink" title="1.1 ArrayList集合介绍"></a>1.1 ArrayList集合介绍</h2><p>　　通过阅读文档注释我们可以得知:</p><ul><li><strong>底层数据结构为数组</strong>：<code>ArrayList</code>基于数组实现的<code>List</code>类，它的底层是用数组实现的索引序列；</li><li><strong>允许null</strong>：<code>ArrayList</code><strong>允许null</strong>元素；</li><li><strong>动态扩容</strong>：<code>ArrayList</code>的<strong>容量可以自动增长</strong>，通过<code>ensureCapacity</code>方法一次性增加容量，以减少增加重分配的次数提高性能；</li><li><strong>不同步</strong>：<code>ArrayList</code>是线程不安全的，当多条线程访问同一个<code>ArrayList</code>集合时，程序需要手动保证该集合的同步性，而Vector则是线程安全的；</li><li><strong>快速失败：</strong><code>ArrayList</code>的iterator和<code>listIterator</code>方法返回的迭代器是<strong>fail-fast</strong>的</li></ul><h2 id="1-2-数组结构介绍"><a href="#1-2-数组结构介绍" class="headerlink" title="1.2 数组结构介绍"></a>1.2 数组结构介绍</h2><p>　　ArrayList的底层数据结构是用一个Object类型的数组实现元素的存储的，如下图：</p><img src="/2021/01/29/%E3%80%90%E9%9B%86%E5%90%88%E3%80%91ArrayList%E8%AF%A6%E8%A7%A3/image-20210129213343396.png" class="" title="image-20210129213343396"><p>说明：底层的数据结构就是数组，数组元素类型为Object类型，即可以存放所有类型数据。我们对ArrayList类的实例的所有的操作底层都是基于数组的。</p><h1 id="2-ArrayList继承体系"><a href="#2-ArrayList继承体系" class="headerlink" title="2. ArrayList继承体系"></a>2. ArrayList继承体系</h1><p>　　ArrayList在源码中的定义：</p><figure class="highlight java"><figcaption><span>Java.util.ArrayList</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; </span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p> 　　结构层次图：</p><img src="/2021/01/29/%E3%80%90%E9%9B%86%E5%90%88%E3%80%91ArrayList%E8%AF%A6%E8%A7%A3/image-20210129213321305.png" class="" title="image-20210129213321305"><ul><li><code>ArrayList</code> &lt; E &gt;：说明<code>ArrayList</code>支持泛型。</li><li>继承<code>AbstractList</code> ：继承了<code>AbstractList</code>。<code>AbstractList</code>实现了部分List集合的通用方法，继承提高了代码的复用，提升开发效率。</li><li>实现了  <code>List&lt;E&gt;</code> 接口：实现了<code>List</code>接口的类需要遵守接口中的常规协定去编写List集合的方法。为什么<code>AbstractList</code>中实现了List接口，在子类<code>ArrayList</code>中还要再实现一次？其实并没有什么特别作用，这是开发人员遗留下的一个<a href="http://stackoverflow.com/questions/2165204/why-does-linkedhashsete-extend-hashsete-and-implement-sete">小瑕疵</a></li><li>实现了<code>RandomAccess</code>接口：标记性接口，实现了该接口的类支持快速随机访问。</li><li>实现了<code>Cloneable</code>接口：标记性接口，实现了该接口的类支持使用<code>Object</code>.<code>Clone</code>()方法</li><li>实现了<code>Serializable</code>接口：标记性接口，实现了该接口的类支持序列化操作</li></ul><h1 id="3-ArrayList源码分析"><a href="#3-ArrayList源码分析" class="headerlink" title="3. ArrayList源码分析"></a>3. ArrayList源码分析</h1><h2 id="3-1-类的属性"><a href="#3-1-类的属性" class="headerlink" title="3.1 类的属性"></a>3.1 类的属性</h2><p>　　<code>ArrayList</code> 的属性如下图：</p><img src="/2021/01/29/%E3%80%90%E9%9B%86%E5%90%88%E3%80%91ArrayList%E8%AF%A6%E8%A7%A3/image-20210129220939720.png" class="" title="image-20210129220939720"><p>　　接下来便逐一介绍相关属性的意义：</p><figure class="highlight java"><figcaption><span>ArrayList字段</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//序列化机制中验证版本一致性的版本号，为的是保持版本的兼容性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line">    <span class="comment">//默认初始容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//由transient修饰的Object类型数组，这便是ArrayList底层数据结构</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">    <span class="comment">//ArrayList集合包含的元素数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">//静态的空对象数组实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="comment">//静态的默认空对象数组实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从AbstractList继承的属性。表示已对该List进行结构修改的次数。 即对ArrayList进行增删改查的次数</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　说明：</p><ul><li>transient关键字：可以看出来<code>ArrayList</code>底层数组<code>elementData</code>和记录<code>ArrayList</code>修改次数的变量<code>modCount</code>都是<code>transient</code>修饰的，说明这两个属性不参与序列化。</li></ul><div class='spoiler collapsed'>    <div class='spoiler-title'>        transient关键字作用    </div>    <div class='spoiler-content'>        <p>　　Java的serialization(序列化机制)提供了一种持久化对象实例的机制，或者说存储对象状态的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient，transient是Java语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，transient型变量的值不包括在串行化的表示中，然而非transient型的变量是被包括进去的。例如序列化对象的时候，有些属性就不会序列化到指定的目的地中。说白了serialization就是把对象的状态存储到硬盘上去，等需要的时候就可以再把它读出来使用。有些时候像银行卡号这些字段是不希望在网络上传输的，transient的作用就是把这个字段的生命周期限定仅仅在内存中，不会被写到磁盘中。</p><ul><li><code>modCount</code>：记录集合被修改次数。<code>ArrayList</code>是不同步的，因此在并发修改的环境中会造成数据错乱，<code>java</code>提供快速失败机制来检测并发错误，而<code>modCount</code>则是实现快速机制的核心。</li><li>两个空对象数组实例：<code>EMPTY_ELEMENTDATA</code>的存在是为了将其与<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>分开来，以便了解第一次添加元素时应该设置多大的容量。在接下来的构造方法和添加方法会解释其原因所在。</li></ul>    </div></div><h2 id="3-2-构造方法"><a href="#3-2-构造方法" class="headerlink" title="3.2 构造方法"></a>3.2 构造方法</h2><p>　　在API中构造方法如下：</p><table><thead><tr><th align="left">构造方法</th><th>方法描述</th></tr></thead><tbody><tr><td align="left"><code>ArrayList()</code></td><td>构造一个初始容量为 <code>10</code> 的空列表。</td></tr><tr><td align="left"><code>ArrayList(int initialCapacity)</code></td><td>构造具有指定初始容量的空列表。</td></tr><tr><td align="left"><code>ArrayList(Collection&lt;? extends E&gt; c)</code></td><td>构造一个包含指定集合的元素的列表，按照它们由集合的迭代器返回的顺序。</td></tr></tbody></table><h3 id="3-2-1-空参构造方法"><a href="#3-2-1-空参构造方法" class="headerlink" title="3.2.1 空参构造方法"></a>3.2.1 空参构造方法</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        空参构造方法    </div>    <div class='spoiler-content'>        <figure class="highlight java"><figcaption><span>ArrayList()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//默认空对象数组实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="comment">//底层数组</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将elementData指向默认空对象数组实例</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>　　<strong>此时初始容量是0，而不是 10</strong>。空参构造函数并未用默认初始容量<code>DEFAULT_CAPACITY</code>创建新数组，只是将底层数组引用 <code>elementData</code>指向已经创建好的默认空对象数组实例<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>  。</p><blockquote><p>　注意：</p><p>　　通过<strong>空参构造函数</strong>创建的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br></pre></td></tr></table></figure><p>　　<strong>此时集合长度是0.</strong></p></blockquote><h3 id="3-2-1-有参构造方法"><a href="#3-2-1-有参构造方法" class="headerlink" title="3.2.1 有参构造方法"></a>3.2.1 有参构造方法</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        有参构造方法1    </div>    <div class='spoiler-content'>        <figure class="highlight java"><figcaption><span>ArrayList(int initialCapacity)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//底层数组</span></span><br><span class="line">  <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  initialCapacity  指定的初始容量</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//指定容量大于0，则创建一个指定容量的数组</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//指定容量等于0，将elementData指向空对象数组实例</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//指定容量小于0，抛出非法参数异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>　　可以知道当指定初始容等于0时，elementData是指向空对象数组实例<code>EMPTY_ELEMENTDATA</code>，而不是默认空对象数组实例<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>，这样做的意义与ArrayList的扩容机制有关。</p><br><div class='spoiler collapsed'>    <div class='spoiler-title'>        有参构造方法2    </div>    <div class='spoiler-content'>        <figure class="highlight java"><figcaption><span>ArrayList(Collection<? extends E> c)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//底层数组</span></span><br><span class="line">  <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用已有集合进行初始化</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  c  要将其元素放入ArrayList的集合</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将c集合的元素放置于新的Object数组副本中</span></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="comment">//如果传入的集合c长度不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((size = a.length) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果是同一个类，覆盖elementData</span></span><br><span class="line">            <span class="keyword">if</span> (c.getClass() == ArrayList.class) &#123;</span><br><span class="line">                elementData = a;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则将复制新数组给elementData</span></span><br><span class="line">                elementData = Arrays.copyOf(a, size, Object[].class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则长度为0，赋值给空对象数组实例</span></span><br><span class="line">            elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>　　ArrayList(Collection&lt;? extends E&gt; c)是利用已有集合对ArrayList进行初始化</p><blockquote><p>注意</p><p>　　添加的集合需为Collection类型或其子类型</p></blockquote><h2 id="3-3-添加方法"><a href="#3-3-添加方法" class="headerlink" title="3.3 添加方法"></a>3.3 添加方法</h2><p>　　在API中添加方法如下：</p><table><thead><tr><th align="left">返回类型</th><th align="left">方法名</th><th>方法描述</th></tr></thead><tbody><tr><td align="left"><code>boolean</code></td><td align="left"><code>add(E e)</code></td><td>将指定的元素追加到此列表的末尾。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>add(int index, E element)</code></td><td>在此列表中的指定位置插入指定的元素。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>addAll(Collection&lt;? extends E&gt; c)</code></td><td>按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>addAll(int index, Collection&lt;? extends E&gt; c)</code></td><td>将指定集合中的所有元素插入到此列表中，从指定的位置开始。</td></tr></tbody></table><p>　　从<code>ArrayList</code>的构造方法已知，当<code>ArrayList</code>利用空参构造创建<code>ArrayList</code>对象，或利用有参构造指定初始容量为0时，都没有在堆内存中创建对象，而是将两个空数组实例分别赋给<code>elementData</code>。具体原因与<code>ArrayList</code>的<strong>扩容机制</strong>有关。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        add方法1    </div>    <div class='spoiler-content'>        <p>　　首先来看add(E e)方法的源码</p><figure class="highlight java"><figcaption><span>java.util.ArrayList</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当往ArrayList中添加元素时，首先要确保ArrayList能容量足够，即已有元素数量size加上新添加的元素数量后不会超过底层数组的长度。如有必要，则进行扩容，以确保它至少可以容纳最小容量参数指定的元素数。</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>); </span><br><span class="line">    <span class="comment">//确定将元素放置于索引为size的位置</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="comment">//添加成功返回true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　由上所示，add方法中是利用ensureCapacityInternal方法来确保ArrayList始终能容纳添加元素后的元素数量 size + 1；那么ensureCapacityInternal方法如何确保ArrayList的容量始终能够动态增长的呢？</p><figure class="highlight java"><figcaption><span>java.util.ArrayList</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确保内部容量。通过扩容机制，确保ArrayList的容量大于容纳元素所需的最小容量。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity 容纳元素所需的最小容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//调用ensureExplicitCapacity方法确认是否需要扩容</span></span><br><span class="line">       <span class="comment">//调用calculateCapacity方法计算第一次添加元素时具体要扩容多少</span></span><br><span class="line">       ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算添加元素时底层数组的需要扩容的容量大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity 容纳元素所需的最小容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//如果底层数组是DEFAULTCAPACITY_EMPTY_ELEMENTDATA，说明此时底层数组为空，且是利用的无参构造创建的ArrayList对象，那么则说明用户未指定初始容量，就利用默认初始容量DEFAULT_CAPACITY (10)作为底层数组的初始容量</span></span><br><span class="line">       <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> minCapacity;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确认是否需要扩容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity 容纳元素所需的最小容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//修改次数自增</span></span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果添加元素后容纳元素最小容量比底层数组的容量还大，那么此时就需要扩容</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="comment">//扩容核心方法</span></span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>　　注意此时minCapacity是size + 1,即集合元素数量 + 1。可以看到，ArrayList利用了几个方法分别解决了1.  第一次添加元素时扩容具体容量 2. 是否需要扩容。这也就解释了为什么会有两个空实例数组，为的是判断用户是通过无参构造还是有参构造创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>　　虽然两者都指向空实例对象数组，若是无参构造则说明未指定容量，则容量为默认容量10，若是有参构造则说明用户指定了容量必须为0，则容量为指定容量0。</p><blockquote><p>注意</p><p>　　此时还并未扩容，到目前为止只是确定了是否要扩容，和扩容所需的最小容量。grow方法才是扩容的核心。</p></blockquote><figure class="highlight java"><figcaption><span>java.util.ArrayList</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组容量上限</span></span><br><span class="line"><span class="comment">//为什么要减8?是因为对于不同版本的JVM会在数组中保留一些头字,而尝试分配最大长度会造成OOM</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对底层数组进行扩容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity 容纳元素所需的最小容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 旧容量</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="comment">// 新容量 = 旧容量 X 1.5 。扩容1.5倍</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="comment">// 若扩容后的容量还是不能容纳所有元素，则扩容容量为容纳元素所需的最小容量</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="comment">//若是扩容后的容量超出了扩容容量上限，则将扩容的容量设置为int的极限值。</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// 对底层数组进行复制操作。</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//数值溢出则抛异常</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">           Integer.MAX_VALUE :</span><br><span class="line">           MAX_ARRAY_SIZE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>　　由此可见，grow方法是扩容的核心方法，而Arrays.copyOf方法是扩容的核心，通过复制返回一个元素相同而容量更大的数组。</p>    </div></div><h2 id="3-4-删除方法"><a href="#3-4-删除方法" class="headerlink" title="3.4 删除方法"></a>3.4 删除方法</h2><h2 id="3-5-修改方法"><a href="#3-5-修改方法" class="headerlink" title="3.5 修改方法"></a>3.5 修改方法</h2><h2 id="3-6-查找方法"><a href="#3-6-查找方法" class="headerlink" title="3.6 查找方法"></a>3.6 查找方法</h2><h2 id="3-7-转换方法"><a href="#3-7-转换方法" class="headerlink" title="3.7 转换方法"></a>3.7 转换方法</h2><h2 id="3-8-迭代器"><a href="#3-8-迭代器" class="headerlink" title="3.8 迭代器"></a>3.8 迭代器</h2><h2 id="3-9-判断方法"><a href="#3-9-判断方法" class="headerlink" title="3.9 判断方法"></a>3.9 判断方法</h2><p>参考资料：</p><p><a href="https://www.cnblogs.com/zhangyinhua/p/7687377.html#_label2">https://www.cnblogs.com/zhangyinhua/p/7687377.html#_label2</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;</summary>
    
    
    
    
    <category term="JAVA SE" scheme="http://chiayhon-cell.gitee.io/tags/JAVA-SE/"/>
    
    <category term="集合框架" scheme="http://chiayhon-cell.gitee.io/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>【集合】Collection接口</title>
    <link href="http://chiayhon-cell.gitee.io/2021/01/27/%E3%80%90%E9%9B%86%E5%90%88%E3%80%91Collection%E6%8E%A5%E5%8F%A3/"/>
    <id>http://chiayhon-cell.gitee.io/2021/01/27/%E3%80%90%E9%9B%86%E5%90%88%E3%80%91Collection%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-01-27T13:55:24.000Z</published>
    <updated>2021-01-29T12:04:27.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇主要介绍 Collection接口</p><a id="more"></a><h1 id="1-Collection接口简介及其API"><a href="#1-Collection接口简介及其API" class="headerlink" title="1. Collection接口简介及其API"></a>1. Collection接口简介及其API</h1><p>　　在了解 Collection 接口之前，需要明白两点：什么是 <code>Collection</code>？为什么要定义成接口？</p><p>　　在思考第一个问题之前，不妨先思考这么一个问题：假如让你去开发java的集合框架，你的思路是什么？很显然，最简单的方式就是直接定义几个类，分别实现线性表、栈、队列、集合、哈希表等等数据结构。这就引申出了几个问题：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 假如用户根据自身实际场景想用自己的方式实现一个数据结构，应该如何操作？</span><br><span class="line"><span class="bullet">2.</span> 假如用户开始使用了无序线性表，因为需求改变要使用有序线性表，应该怎么操作？</span><br><span class="line"><span class="bullet">3.</span> 假如开发者要对已有的API进行升级，用在哈希表中添加更高效的方法实现，需要改动多少东西？</span><br></pre></td></tr></table></figure><p>　　其实归根结底，就是<strong>维护和扩展</strong>成本的问题。那么问题又来了，在java中集合是怎么设计的呢？仔细端详整个集合框架，不难发现有以下特点：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有一个高度抽象的根节点接口。通过继承根接口可以定义许多更具体的子接口来定义不同的数据结构。而根接口定义了子接口中共有方法，提高代码复用率。</span><br><span class="line"><span class="bullet">2.</span> 接口都有对应的抽象类。抽象类实现了接口的部分方法，对于有需要的用户，可以自定义集合快速扩展自己的业务。</span><br><span class="line"><span class="bullet">3.</span> 抽象类有具体的实现，对于没有自定义集合需求的用户，可以直接调用。</span><br></pre></td></tr></table></figure><p>　　这样设计明显提高了代码的维护性和扩展性</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        集合框架设计思想    </div>    <div class='spoiler-content'>        <p>The main design goal was to produce an API that was small in size and, more importantly, in “conceptual weight.” It was critical that the new functionality not seem too different to current Java programmers; it had to augment current facilities, rather than replace them. At the same time, the new API had to be powerful enough to provide all the advantages described previously.</p><p>To keep the number of core interfaces small, the interfaces do not attempt to capture such subtle distinctions as mutability, modifiability, and resizability. Instead, certain calls in the core interfaces are <em>optional</em>, enabling implementations to throw an <code>UnsupportedOperationException</code> to indicate that they do not support a specified optional operation. Collection implementers must clearly document which optional operations are supported by an implementation.</p><p>To keep the number of methods in each core interface small, an interface contains a method only if either:</p><ul><li>It is a truly <em>fundamental operation</em>: a basic operations in terms of which others could be reasonably defined,</li><li>There is a compelling performance reason why an important implementation would want to override it.</li></ul><p>It was critical that all reasonable representations of collections interoperate well. This included arrays, which cannot be made to implement the <code>Collection</code> interface directly without changing the language. Thus, the framework includes methods to enable collections to be moved into arrays, arrays to be viewed as collections, and maps to be viewed as collections.</p><hr><p>主要的设计目标是产生一个小而美的API，更重要的是强调”小“。对于当前的Java程序员来说，新的功能不能有太大的不同，这一点至关重要。并且应该遵循开闭原则：对扩展开放，对修改关闭。与此同时新的API必须足够强大，以提供前面描述的所有优点。</p><p>为了使核心接口的数量保持较小，接口不会试图捕获诸如可变性、可修改性和可调整大小等细微差别。相反，核心接口中的某些方法是<em>optional</em>（可选的），使实现能够抛出一个<code>UnsupportedOperationException</code>来指示它们不支持指定的可选操作。集合实现者必须清楚地记录实现支持哪些可选操作。</p><p>为了使每个核心接口中的方法数保持较小，接口仅在以下任一情况下包含方法：</p><ul><li><p>这是一种真正的“基本操作”：一种可以合理定义其他操作的基本操作，</p></li><li><p>一个重要的实现之所以要覆盖它，有一个令人信服的性能原因。</p></li></ul><p>至关重要的是，集合的所有合理表示都能很好地互操作。这包括数组，如果不改变语言，就不能直接实现“Collection”接口。因此，该框架包括使集合能够移动到数组中、将数组视为集合以及将映射视为集合的方法。</p>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        集合框架的优点    </div>    <div class='spoiler-content'>        <ul><li><strong>Reduces programming effort</strong> by providing data structures and algorithms so you don’t have to write them yourself.</li><li><strong>Increases performance</strong> by providing high-performance implementations of data structures and algorithms. Because the various implementations of each interface are interchangeable, programs can be tuned by switching implementations.</li><li><strong>Provides interoperability between unrelated APIs</strong> by establishing a common language to pass collections back and forth.</li><li><strong>Reduces the effort required to learn APIs</strong> by requiring you to learn multiple ad hoc collection APIs.</li><li><strong>Reduces the effort required to design and implement APIs</strong> by not requiring you to produce ad hoc collections APIs.</li><li><strong>Fosters software reuse</strong> by providing a standard interface for collections and algorithms with which to manipulate them.</li></ul><hr><ul><li><strong>通过提供数据结构和算法来减少编程工作量</strong>，这样就不必自己编写了。</li><li><strong>通过提供数据结构和算法的高性能实现来提高性能</strong>。因为每个接口的各种实现是可互换的，所以可以通过切换实现来调整程序。</li><li><strong>通过建立一种公共语言来来回传递集合，在不相关的API之间提供互操作性</strong>。</li><li><strong>通过要求您学习多个临时集合API，减少学习API所需的工作量</strong>。</li><li><strong>减少了设计和实现API所需的工作量</strong>，因为不需要生成特殊集合API。</li><li><strong>通过为集合和算法提供一个标准接口来操纵它们，从而促进软件重用</strong>。</li></ul>    </div></div><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p>　　到这里就很清楚： <code>Collection</code> 是集合框架的根接口，高度抽象出了具体集合的公共方法，便于集合的扩展与维护。那么什么是 <code>Collection</code> 呢？</p><p>　　关于 <code>Collection</code> ，<a href="https://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html">官方文档</a>是这么定义的：</p><blockquote><p>A <code>Collection</code> represents a group of objects known as its elements. The <code>Collection</code> interface is used to pass around collections of objects where maximum generality is desired.</p></blockquote><p>　　即 <code>Collection</code> 是一组对象的统称，这些对象被称为它的元素。一般我们把 <code>Collection</code> 称为单列集合。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        Collection源码文档注释    </div>    <div class='spoiler-content'>        <p>The root interface in the collection hierarchy. A collection represents a group of objects, known as its elements. Some collections allow duplicate elements and others do not. Some are ordered and others unordered. The JDK does not provide any direct implementations of this interface: it provides implementations of more specific subinterfaces like Set and List. This interface is typically used to pass collections around and manipulate them where maximum generality is desired.<br>Bags or multisets (unordered collections that may contain duplicate elements) should implement this interface directly.</p><p>All general-purpose Collection implementation classes (which typically implement Collection indirectly through one of its subinterfaces) should provide two “standard” constructors: a void (no arguments) constructor, which creates an empty collection, and a constructor with a single argument of type Collection, which creates a new collection with the same elements as its argument. In effect, the latter constructor allows the user to copy any collection, producing an equivalent collection of the desired implementation type. There is no way to enforce this convention (as interfaces cannot contain constructors) but all of the general-purpose Collection implementations in the Java platform libraries comply.</p><p>The “destructive” methods contained in this interface, that is, the methods that modify the collection on which they operate, are specified to throw UnsupportedOperationException if this collection does not support the operation. If this is the case, these methods may, but are not required to, throw an UnsupportedOperationException if the invocation would have no effect on the collection. For example, invoking the addAll(Collection) method on an unmodifiable collection may, but is not required to, throw the exception if the collection to be added is empty.</p><p>Some collection implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically NullPointerException or ClassCastException. Attempting to query the presence of an ineligible element may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible element whose completion would not result in the insertion of an ineligible element into the collection may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as “optional” in the specification for this interface.</p><p>It is up to each collection to determine its own synchronization policy. In the absence of a stronger guarantee by the implementation, undefined behavior may result from the invocation of any method on a collection that is being mutated by another thread; this includes direct invocations, passing the collection to a method that might perform invocations, and using an existing iterator to examine the collection.</p><p>Many methods in Collections Framework interfaces are defined in terms of the equals method. For example, the specification for the contains(Object o) method says: “returns true if and only if this collection contains at least one element e such that (o==null ? e==null : o.equals(e)).” This specification should not be construed to imply that invoking Collection.contains with a non-null argument o will cause o.equals(e) to be invoked for any element e. Implementations are free to implement optimizations whereby the equals invocation is avoided, for example, by first comparing the hash codes of the two elements. (The Object.hashCode() specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying Object methods wherever the implementor deems it appropriate.</p><p>Some collection operations which perform recursive traversal of the collection may fail with an exception for self-referential instances where the collection directly or indirectly contains itself. This includes the clone(), equals(), hashCode() and toString() methods. Implementations may optionally handle the self-referential scenario, however most current implementations do not do so.</p><p>This interface is a member of the Java Collections Framework.</p><hr><p>集合层次结构中的根接口。 集合表示一组对象，称为其元素。 一些集合允许重复的元素，而另一些则不允许。 一些是有序的，而其他则是无序的。 JDK不提供此接口的任何直接实现：它提供更具体的子接口（例如Set和List）的实现。 该接口通常用于传递集合，并在需要最大通用性的地方操作它们。<br>Bag或多集（可能包含重复元素的无序集合）应直接实现此接口。<br>所有通用的Collection实现类（通常通过其子接口之一间接实现Collection ）都应提供两个“标准”构造函数：一个void（无参数）构造函数，用于创建一个空集合，以及一个类型为单个参数的构造函数Collection ，它将创建一个新集合，其元素与其参数相同。 实际上，后一个构造函数允许用户复制任何集合，从而生成所需实现类型的等效集合。 没有强制执行此约定的方法（因为接口不能包含构造函数），但是Java平台库中的所有通用Collection实现都遵从。<br>如果此集合不支持该操作，则指定该接口中包含的“破坏性”方法（即，修改其操作的集合的方法）以引发UnsupportedOperationException 。 在这种情况下，如果调用对集合没有影响，则这些方法可能会（但不是必需）引发UnsupportedOperationException 。 例如，如果要添加的集合为空，则对一个不可修改的集合调用addAll(Collection)方法可能（但并非必须）引发异常。<br>一些集合实现对它们可能包含的元素有限制。 例如，某些实现禁止使用null元素，而某些实现对其元素类型进行限制。 尝试添加不合格元素会引发未经检查的异常，通常是NullPointerException或ClassCastException 。 尝试查询不合格元素的存在可能会引发异常，或者可能仅返回false；否则，可能会返回false。 一些实现将表现出前一种行为，而某些将表现出后者。 更一般地，尝试对不合格元素进行操作，该操作的完成不会导致将不合格元素插入集合中，这可能会导致异常或成功实现，具体取决于实现方式。 此类异常在此接口的规范中标记为“可选”。<br>由每个集合决定自己的同步策略。 在实现没有更强有力的保证的情况下，未定义的行为可能是由于调用另一个线程正在变异的集合上的任何方法而导致的； 这包括直接调用，将集合传递给可能执行调用的方法，以及使用现有的迭代器检查集合。<br>Collections Framework接口中的许多方法都是根据equals方法定义的。 例如， contains(Object o)方法的规范说：“当且仅当此集合包含至少一个元素e使得（o == null？e == null：o.equals（e））时，返回true。 ” 本说明书不应被解释为暗示具有非空参数ö调用Collection.contains将导致o.equals（e）中被调用用于任何要素e。 实现可以自由地进行优化，从而避免了等号调用，例如，首先比较两个元素的哈希码。 （ Object.hashCode()规范保证了具有不相等哈希码的两个对象不能相等。）更一般而言，各种Collections Framework接口的实现都可以在实现者认为合适的地方随意利用底层Object方法的指定行为。 。<br>某些执行集合递归遍历的集合操作可能会失败，但自直接引用实例的例外情况是，集合直接或间接包含自身。 这包括clone() ， equals() ， hashCode()和toString()方法。 实现可以有选择地处理自引用场景，但是大多数当前实现不这样做。<br>该接口是Java Collections Framework的成员。</p>    </div></div><br><p>　　<strong>总结：Collection即单列集合，统一定义了一套单列集合的接口。Collection接口是List、Set等子接口高度抽象出来的接口，它包含了这些集合的基本操作。</strong></p><h2 id="1-2-Collection接口Api一览"><a href="#1-2-Collection接口Api一览" class="headerlink" title="1.2 Collection接口Api一览"></a>1.2 Collection接口Api一览</h2><p>由图中我们可以看出：</p><ul><li><p>重写了Iterable接口的iterator方法。</p></li><li><p>重写了Object类的equals和hashCode方法。</p></li><li><p>定义了一系列待实现方法。</p></li></ul><p><strong>为什么重写Iterable接口的iterator方法？</strong></p><p>　　很直观。我们一看注释其实就能大概明白Java设计人员的思路，其实Iterable接口可以看成许多容器类共同特性被提取出来做了接口。而相对于不同容器，这个共有特性的具体实现细节又不同。既然不同所以又要自己定义自己系列的迭代器规则，并让所有实现类都遵循这个规则。</p><p>　　对于Collection接口来说，它规定子接口及其实现类都必须满足它重新设定的规则。</p><blockquote><p>Returns an iterator over the elements in this collection. There are no guarantees concerning the order in which the elements are returned</p><p>针对于集合中的所有元素返回一个该集合的迭代器。 但是该迭代器无法保证元素间具有顺序性。(除非这个集合是某个具有这一特性的类的实例)</p></blockquote><p>这里只列出Collection 接口API方法概要，具体详情请自查API文档(<a href="https://www.matools.com/api/java8">中文</a> ， <a href="https://docs.oracle.com/javase/8/docs/api/">英文</a>)</p><h3 id="1-2-1-查询操作"><a href="#1-2-1-查询操作" class="headerlink" title="1.2.1 查询操作"></a>1.2.1 查询操作</h3><table><thead><tr><th>返回类型</th><th>方法及其描述</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>size()</code>　　返回此 collection 中的元素数。</td></tr><tr><td><code>boolean</code></td><td><code>isEmpty()</code>　　如果此 collection 不包含元素，则返回 <code>true</code>。</td></tr><tr><td><code>boolean</code></td><td><code>contains(Object o)</code>　　如果此 collection 包含指定的元素，则返回 <code>true</code>。</td></tr><tr><td><code>Object[]</code></td><td><code>toArray()</code>　　返回包含此 collection 中所有元素的数组。</td></tr><tr><td><code>&lt;T&gt; T[]</code></td><td><code>toArray(T[] a)</code>　　返回包含此 collection 中所有元素的数组；返回数组的运行时类型与指定数组的运行时类型相同。</td></tr><tr><td><code>Iterator&lt;E&gt;</code></td><td><code>iterator()</code>　　返回在此 collection 的元素上进行迭代的迭代器。</td></tr><tr><td><code>default Spliterator&lt;E&gt;</code></td><td><code>spliterator()</code>创建一个<code>Spliterator</code>在这个集合中的元素。</td></tr></tbody></table><h3 id="1-2-2-修改操作"><a href="#1-2-2-修改操作" class="headerlink" title="1.2.2 修改操作"></a>1.2.2 修改操作</h3><table><thead><tr><th>返回类型</th><th>方法及其描述</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>add(E e)</code>　　确保此 collection 包含指定的元素（可选操作）。</td></tr><tr><td><code>boolean</code></td><td><code>remove(Object o)</code>　　从此 collection 中移除指定元素的单个实例，如果存在的话（可选操作）。</td></tr></tbody></table><h3 id="1-2-3-批量操作"><a href="#1-2-3-批量操作" class="headerlink" title="1.2.3 批量操作"></a>1.2.3 批量操作</h3><table><thead><tr><th>返回类型</th><th>方法及其描述</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>containsAll(Collection&lt;?&gt; c)</code>    　　如果此 collection 包含指定 collection 中的所有元素，则返回 <code>true</code>。</td></tr><tr><td><code>boolean</code></td><td><code>addAll(Collection&lt;? extends E&gt; c)</code>　　将指定 collection 中的所有元素都添加到此 collection 中（可选操作）。</td></tr><tr><td><code>boolean</code></td><td><code>removeAll(Collection&lt;?&gt; c)</code>　　移除此 collection 中那些也包含在指定 collection 中的所有元素（可选操作）</td></tr><tr><td><code>default boolean</code></td><td><code>removeIf(Predicate&lt;? super E&gt; filter)</code>删除满足给定谓词的此集合的所有元素。</td></tr><tr><td><code>boolean</code></td><td><code>retainAll(Collection&lt;?&gt; c)</code>仅保留此集合中包含在指定集合中的元素（可选操作）。</td></tr><tr><td><code>void</code></td><td><code>clear()</code>从此集合中删除所有元素（可选操作）。</td></tr></tbody></table><h3 id="1-2-4-并行操作"><a href="#1-2-4-并行操作" class="headerlink" title="1.2.4 并行操作"></a>1.2.4 并行操作</h3><table><thead><tr><th>返回类型</th><th>方法及其描述</th></tr></thead><tbody><tr><td><code>default Stream&lt;E&gt;</code></td><td><code>parallelStream()</code>返回可能并行的 <code>Stream</code>与此集合作为其来源。</td></tr><tr><td><code>default Stream&lt;E&gt;</code></td><td><code>stream()</code>返回以此集合作为源的顺序 <code>Stream</code> 。</td></tr></tbody></table><h1 id="2-底层源码"><a href="#2-底层源码" class="headerlink" title="2. 底层源码"></a>2. 底层源码</h1><p>　　要理解集合需要阅读源码，如果时间足够可以跟着敲一遍，能理解得比较深刻。如下为部分本人阅读过的API</p><h2 id="2-1-Collection接口部分源码"><a href="#2-1-Collection接口部分源码" class="headerlink" title="2.1 Collection接口部分源码"></a>2.1 Collection接口部分源码</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        Collection接口示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><figcaption><span>MyCollection接口</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * 概要：</span></span><br><span class="line"><span class="comment"> * Collection接口是集合的根接口。集合用于存储一组对象，而这些对象一般称为集合的元素。不同的集合对元素可以有不同的规则，例如，</span></span><br><span class="line"><span class="comment"> * 一些集合可以要求集合里的元素是有序的，或者是不能重复存储，亦或者是两者都要求。</span></span><br><span class="line"><span class="comment"> * 继承链：</span></span><br><span class="line"><span class="comment"> * Collection接口一般不提供任何的直接实现，它一般用于定义所有子接口的共有方法，是所有子接口的高度抽象。每个子接口是某种特定的集合的方法规范，</span></span><br><span class="line"><span class="comment"> * 而根接口则是包含了这些集合的所有通用的基本操作。Collection接口可以被间接实现，即通过实现子接口间接实现。</span></span><br><span class="line"><span class="comment"> * 初始化：</span></span><br><span class="line"><span class="comment"> * 所有的Collection实现类都应该提供两种&quot;标准&quot;构造方法：一个是void(无参数)构造方法，用于创建空的集合;另一个是形参为Collection类型的单参</span></span><br><span class="line"><span class="comment"> * 数构造方法，用于创建一个与传入参数有相同元素的新集合。</span></span><br><span class="line"><span class="comment"> * 使用场景：</span></span><br><span class="line"><span class="comment"> * Collection接口使用场景多是作为形参传递某种集合(利用多态性),或者是在集合通用方法的使用频率高的地方进行使用(最大普遍性)。</span></span><br><span class="line"><span class="comment"> * 关于异常：</span></span><br><span class="line"><span class="comment"> * Collection接口包含修改集合元素的方法，如果实现的集合不支持该操作，则这些方法应该抛出 UnsupportedOperationException。另外，某些</span></span><br><span class="line"><span class="comment"> * 集合对它们的元素会有限制，例如，某些实现会禁止将null加入其集合中。此时若试图将不合法元素加入集合，应该抛出一个非受检异常，通常是</span></span><br><span class="line"><span class="comment"> * NullPointerException 或 ClassCastException。又或者，试图查询集合中是否存在不合法元素时，可以抛出一个异常，或者返回false，这取决于集合</span></span><br><span class="line"><span class="comment"> * 的具体实现。总之对于这样子的异常在此接口的规范中是&quot;可选&quot;的</span></span><br><span class="line"><span class="comment"> * 关于同步：</span></span><br><span class="line"><span class="comment"> * Collection不提供同步策略，由每个集合自身来确定同步策略</span></span><br><span class="line"><span class="comment"> * 关于equals方法：</span></span><br><span class="line"><span class="comment"> * 集合中很多方法都是基于equals方法定义的。例如，contains(Object obj) 方法的规范声明：“当且仅当此集合包含至少一个满足</span></span><br><span class="line"><span class="comment"> * (obj==null ? e==null :obj.equals(e)) 表达式的元素 e 时，返回 true。”。但这不是暗指：调用非空参数obj的Collection.contains方法时</span></span><br><span class="line"><span class="comment"> * 一定会调用obj.equals(e)，这里只是解释集合很多方法依赖于equals方法来完成，如果有更好的优化也可以避免使用equals方法，例如可以先比较两元素的</span></span><br><span class="line"><span class="comment"> * 哈希码是否相等。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>: &lt;Element&gt; 集合中元素的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: jdk1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//===========查询操作===========</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: size()方法用于返回此集合中的元素数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 此集合中元素的数量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: isEmpty()方法用于查询集合是否为空</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 如果集合没有元素则返回 true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: contain(Object obj)方法用于查找是否包含指定元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> obj: 将要检查是否存在于此集合中的元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 如果此集合包含指定的元素，则返回true</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException: 如果指定元素的类型与此集合不兼容（可选）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException: 如果指定的元素为null，并且此集合不允许为null的元素（可选)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: iterator()方法用于获得用于遍历数组的迭代器。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 返回一个包含该集合元素的迭代器。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">Iterator&lt;Element&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: toArray()方法返回一个包含集合所有元素的Object类型的数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: Object类型的数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Object[] toArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: toArray(Type[] array)方法指定一个Type类型的数组，将集合中的所有元素存入其中(要求集合中的元素也是Type类型或其子类型)</span></span><br><span class="line"><span class="comment">     * ,若指定数组不能容纳集合中的所有元素，则将创建一个长度与集合元素数量相等的数组，然后将所有集合元素存入其中并返回。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> array: 指定一个用于存放所有元素的Type类型的数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 存放着所有元素的数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &lt;Type&gt; Type[] toArray(Type[] array);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//===========修改操作===========</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: add(Element element)方法用于确保集合中包含指定元素。如果添加成功，则返回true。如果集合不允许元素重复,且集合中已经包</span></span><br><span class="line"><span class="comment">    * 含指定元素，此时返回false，除此原因之外，集合因为其他原因而拒绝添加一个元素，则必须抛出一个异常。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> element: 确保要存在于此集合中的元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 是否添加成功</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span>: UnsupportedOperationException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> UnsupportedOperationException: 如果此集合不支持添加操作</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ClassCastException: 如果该元素类型与集合指定类型不兼容</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException: 如果指定的元素为null，并且此集合不允许使用null元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException: 如果添加非法元素到此集合中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalStateException: 如果由于插入限制当前无法添加元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Element element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: remove(Element element)方法用于删除元素。如果存在指定元素，则从此集合中删除指定元素，若删除成功则返回 true。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> element: 要从此集合中删除的元素(如果存在)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 是否删除成功</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Element element)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//===========批量操作===========</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: containAll(Collection&lt;?&gt; collection)用于查询集合中是否包含指定集合的所有元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> collection: 指定的集合</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: boolean 如果此集合包含指定集合的所有元素，则为true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: addAll(Collection&lt;? extends Element&gt; collection)用于向集合中添加指定集合的所有元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> collection:  指定的集合</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 如果此集合由于调用而更改，则为true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends Element&gt; collection)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: removeAll(Collection&lt;?&gt; collection)用于从集合中删除同时存在于指定集合中的元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> collection: 指定的集合</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 如果此集合由于调用而更改，则为true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: remainAll(Collection&lt;Element&gt; collection)用于从此集合中删除所有未包含在指定集合中的元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> collection:  指定的集合</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 如果此集合由于调用而更改，则为true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remainAll</span><span class="params">(Collection&lt;?&gt; collection)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: clear()用于清空集合，执行此操作后集合将没有元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//===========比较与哈希===========</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: equals(Object obj)方法用于比较此集合与指定对象是否相等。</span></span><br><span class="line"><span class="comment">    * 若是开发者直接实现Collection接口(即不是MyList接口或者MySet接口的实现类),不建议重写equals方法，建议直接使用Object方法里的equals方</span></span><br><span class="line"><span class="comment">    * 法。</span></span><br><span class="line"><span class="comment">    * 在Object.equals方法的常规协定声称:相等必须是对称的(a.equals(b)的结果应该与b.equals(a)相同)。在MyList.equals方法和MySet方法的</span></span><br><span class="line"><span class="comment">     * 常规协定声称MyList集合只能和MyList集合相等，MySet集合只能和MySet集合相等。因此，对于一个不实现MyList集合与MySet集合的Collection</span></span><br><span class="line"><span class="comment">     * 集合，当Collection集合的元素与MyList的和MySet的元素进行比较时，常规的equals方法必须返回false，也就是说，不存在一个既实现MyList</span></span><br><span class="line"><span class="comment">     * 接口又实现MySet接口的实现类。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> obj: 该集合进行相等性比较的对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: Collection中没有对hashCode方法有常规协定，所以应该遵守Object.hashCode的常规协定。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: 返回此集合的哈希值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-AbstractCollection部分源码"><a href="#2-2-AbstractCollection部分源码" class="headerlink" title="2.2 AbstractCollection部分源码"></a>2.2 AbstractCollection部分源码</h2>    </div></div><p>AbstractCollection为Collection的抽象实现类</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        AbstractCollection接口示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><figcaption><span>AbstractMyCollection接口</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 此类提供了Collection接口的基本实现，以最大程度地减少实现此接口所需的工作。</span></span><br><span class="line"><span class="comment"> * 要实现不可修改的集合，只需扩展此类并为iterator和size方法提供实现。 （由iterator方法返回的迭代器必须实现hasNext和next 。）</span></span><br><span class="line"><span class="comment"> * 要实现可修改的集合，程序员必须另外重写此类的add方法（否则将抛出UnsupportedOperationException ），并且iterator方法返回的迭代器必须另外</span></span><br><span class="line"><span class="comment"> * 实现其remove方法。</span></span><br><span class="line"><span class="comment"> * 根据Collection接口规范中的建议，程序员通常应提供一个返回值为void（无参数）和Collection构造函数。</span></span><br><span class="line"><span class="comment"> * 此类中每个非抽象方法的文档都详细描述了其实现。 如果正在实现的集合允许更有效的实现，则可以覆盖这些方法中的每一个</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: jdk1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCollection</span>&lt;<span class="title">Element</span>&gt; <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 构造函数，隐式调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractCollection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=============查询操作===============</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: size()方法用于返回此集合中的元素数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 此集合中元素的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: isEmpty()方法用于查询集合是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 如果集合没有元素则返回 true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj : 将要检查是否存在于此集合中的元素,</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException:   如果指定元素的类型与此集合不兼容（可选）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException: 如果指定的元素为null，并且此集合不允许为null的元素（可选)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 此实现对集合中的元素进行迭代，依次检查每个元素与指定元素的相等性。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 如果此集合包含指定的元素，则返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取迭代器</span></span><br><span class="line">        Iterator&lt;Element&gt; iterator = iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//指定元素为null</span></span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (iterator.next() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//遍历的集合中有元素为null</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//指定元素不为null</span></span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (iterator.equals(obj)) &#123;</span><br><span class="line">                    <span class="comment">//遍历的集合中有与指定元素相同的元素</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: iterator()方法用于获得用于遍历数组的迭代器。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 返回一个包含该集合元素的迭代器。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;Element&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: toArray()方法返回一个包含集合所有元素的Object类型的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: Object类型的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="comment">//预估返回数组长度为当前集合的size</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建迭代器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设数组刚好能装下集合中所有元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果集合元素少于预期，提前结束，返回数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果元素多于于预期，继续遍历，直至遍历完返回数组副本</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array : 指定一个用于存放所有元素的Type类型的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: toArray(Type[] array)方法指定一个Type类型的数组，将集合中的所有元素存入其中(要求集合中的元素也是Type类型或其子类型)</span></span><br><span class="line"><span class="comment">     * ,若指定数组不能容纳集合中的所有元素，则将创建一个长度与集合元素数量相等的数组，然后将所有集合元素存入其中并返回。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 存放着所有元素的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray(Object[] array) &#123;</span><br><span class="line">        <span class="comment">//预估返回数组长度：判断指定数组的长度是否能容纳集合中的所有元素，若不能则需进行加宽操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设数组刚好能装下集合中所有元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果集合元素少于预期，提前结束，并将后续元素置为null，返回数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果元素多于于预期，继续遍历，直至遍历完返回数组副本</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=============修改操作===============</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o : 确保要存在于此集合中的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: add方法用于确保集合中包含指定元素。如果添加成功，则返回true。如果集合不允许元素重复,且集合中已经包</span></span><br><span class="line"><span class="comment">     * 含指定元素，此时返回false，除此原因之外，集合因为其他原因而拒绝添加一个元素，则必须抛出一个异常。</span></span><br><span class="line"><span class="comment">     * 关于此实现：</span></span><br><span class="line"><span class="comment">     * AbstractCollection类未定义底层存储元素的数据结构，无法实现add方法</span></span><br><span class="line"><span class="comment">     * 此实现始终抛出 UnsupportedOperationException(不支持操作异常)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 是否添加成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支持add方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o : 要从此集合中删除的元素(如果存在)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: remove(Element element)方法用于删除元素。如果存在指定元素，则从此集合中删除指定元素，若删除成功则返回 true。</span></span><br><span class="line"><span class="comment">     * 关于此实现：</span></span><br><span class="line"><span class="comment">     * 此实现遍历集合以查找指定的元素。 如果找到该元素，则使用迭代器的remove方法从集合中删除该元素。</span></span><br><span class="line"><span class="comment">     * 请注意，如果此集合的iterator方法返回的迭代器未实现remove方法并且此集合包含指定的对象，则此实现将引发UnsupportedOperationException 。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 是否删除成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建迭代器</span></span><br><span class="line">        Iterator&lt;Element&gt; it = iterator();</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果指定删除元素为null</span></span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it.next() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//且集合中元素存在元素为null，进行删除</span></span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果指定删除元素不为null</span></span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(it.next())) &#123;</span><br><span class="line">                    <span class="comment">//且集合中存在元素与指定元素相等,进行删除</span></span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则删除失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========批量操作==========</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection : 检查是否包含在此集合中的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: containAll(Collection &lt; ? &gt; collection)用于查询集合中是否包含指定集合的所有元素</span></span><br><span class="line"><span class="comment">     * 关于此实现:</span></span><br><span class="line"><span class="comment">     * 此实现迭代指定的集合，依次检查迭代器返回的每个元素以查看其是否包含在此集合中。 如果如此包含所有元素，则返回true ，否则返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean 如果此集合包含指定集合的所有元素，则为true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containAll</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历集合每个元素</span></span><br><span class="line">        <span class="keyword">for</span> (Object element : collection) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!contain(element)) &#123;</span><br><span class="line">                <span class="comment">//只要有一个元素不包含,返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//否则返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection :  指定的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: addAll(Collection &lt; ? extends Element &gt; collection)用于向集合中添加指定集合的所有元素</span></span><br><span class="line"><span class="comment">     * 关于此实现：</span></span><br><span class="line"><span class="comment">     * 此实现迭代指定的集合，并将迭代器返回的每个对象依次添加到此集合。</span></span><br><span class="line"><span class="comment">     * 请注意，此实现将引发UnsupportedOperationException 除非重写了add方法。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 如果此集合由于调用而更改，则为true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends Element&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个变量表示集合是否发生修改</span></span><br><span class="line">        <span class="keyword">boolean</span> isModifySuccess = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Element element : collection) &#123;</span><br><span class="line">            <span class="keyword">if</span> (add(element)) &#123;</span><br><span class="line">                <span class="comment">//如果add方法执行成功，则将集合的修改状态变量设为true</span></span><br><span class="line">                isModifySuccess = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回集合的修改状态</span></span><br><span class="line">        <span class="keyword">return</span> isModifySuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection : 指定的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: removeAll(Collection &lt; ? &gt; collection)用于从集合中删除同时存在于指定集合中的元素</span></span><br><span class="line"><span class="comment">     * 关于此实现:</span></span><br><span class="line"><span class="comment">     * 此实现遍历此集合，依次检查迭代器返回的每个元素以查看其是否包含在指定的集合中。 如果包含了它，则使用迭代器的remove方法将其从此集合中删除。</span></span><br><span class="line"><span class="comment">     * 请注意，如果由迭代器方法返回的迭代器未实现remove方法，并且此集合包含一个或多个与指定集合相同的元素，则此实现将引发UnsupportedOperationException。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 如果此集合由于调用而更改，则为true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定的集合不能为空，否则抛出空指针异常</span></span><br><span class="line">        Objects.requireNonNull(collection);</span><br><span class="line">        <span class="comment">//定义一个变量表示集合是否发生修改</span></span><br><span class="line">        <span class="keyword">boolean</span> isModifySuccess = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//定义一个迭代器用于遍历集合</span></span><br><span class="line">        Iterator&lt;?&gt; iterator = iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (collection.contains(iterator.next())) &#123;</span><br><span class="line">                <span class="comment">//如果集合中的元素同时存在于指定的集合中，则进行删除</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">                isModifySuccess = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回集合修改状态</span></span><br><span class="line">        <span class="keyword">return</span> isModifySuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection :  指定的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: remainAll(Collection &lt; ? &gt; collection)用于从此集合中删除所有未包含在指定集合中的元素</span></span><br><span class="line"><span class="comment">     * 关于此实现:</span></span><br><span class="line"><span class="comment">     * 此实现遍历此集合，依次检查迭代器返回的每个元素以查看其是否包含在指定的集合中。 如果没有包含，则使用迭代器的remove方法将其从此集合中移除。</span></span><br><span class="line"><span class="comment">     * 请注意，如果iterator方法返回的迭代器未实现remove方法，并且此集合包含一个或多个指定集合中不存在的元素，则此实现将引发UnsupportedOperationException。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 如果此集合由于调用而更改，则为true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remainAll</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定的集合不能为空，否则抛出空指针异常</span></span><br><span class="line">        Objects.requireNonNull(collection);</span><br><span class="line">        <span class="comment">//定义一个变量表示集合是否发生修改</span></span><br><span class="line">        <span class="keyword">boolean</span> isModifySuccess = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//定义一个迭代器用于遍历集合</span></span><br><span class="line">        Iterator&lt;?&gt; iterator = iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!collection.contains(iterator.next())) &#123;</span><br><span class="line">                <span class="comment">//如果集合中的元素不存在于指定的集合中，则进行删除</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">                isModifySuccess = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回集合修改状态</span></span><br><span class="line">        <span class="keyword">return</span> isModifySuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: clear()用于清空集合，执行此操作后集合将没有元素</span></span><br><span class="line"><span class="comment">     * 关于此实现：</span></span><br><span class="line"><span class="comment">     * 此实现遍历此集合，使用Iterator.remove操作删除每个元素。 大多数实现可能会选择重写此方法以提高效率。</span></span><br><span class="line"><span class="comment">     * 请注意，如果此集合的迭代器方法返回的迭代器未实现remove方法且该集合为非空，则此实现将引发UnsupportedOperationException 。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个该集合的迭代器</span></span><br><span class="line">        Iterator&lt;Element&gt; iterator = iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//如果元素存在，则将其从集合中删除</span></span><br><span class="line">            iterator.next();</span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========比较与哈希==========</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj : 该集合进行相等性比较的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: equals(Object obj)方法用于比较此集合与指定对象是否相等。</span></span><br><span class="line"><span class="comment">     * 若是开发者直接实现Collection接口(即不是MyList接口或者MySet接口的实现类),不建议重写equals方法，建议直接使用Object方法里的equals方</span></span><br><span class="line"><span class="comment">     * 法。</span></span><br><span class="line"><span class="comment">     * 在Object.equals方法的常规协定声称:相等必须是对称的(a.equals(b)的结果应该与b.equals(a)相同)。在MyList.equals方法和MySet方法的</span></span><br><span class="line"><span class="comment">     * 常规协定声称MyList集合只能和MyList集合相等，MySet集合只能和MySet集合相等。因此，对于一个不实现MyList集合与MySet集合的Collection</span></span><br><span class="line"><span class="comment">     * 集合，当Collection集合的元素与MyList的和MySet的元素进行比较时，常规的equals方法必须返回false，也就是说，不存在一个既实现MyList</span></span><br><span class="line"><span class="comment">     * 接口又实现MySet接口的实现类。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: Collection中没有对hashCode方法有常规协定，所以应该遵守Object.hashCode的常规协定。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 返回此集合的哈希值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========字符串转换==========</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 返回此集合的字符串表示形式。</span></span><br><span class="line"><span class="comment">     * 关于此实现：</span></span><br><span class="line"><span class="comment">     * 字符串表示形式包含一个集合元素的列表，这些元素按其迭代器返回的顺序排列，并括在方括号（ “ []” ）中。</span></span><br><span class="line"><span class="comment">     * 相邻元素由字符“，” （逗号和空格）分隔。 元素通过String.valueOf(Object)转换为字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: 对象的字符串表示形式。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个该集合的迭代器</span></span><br><span class="line">        Iterator&lt;Element&gt; iterator = iterator();</span><br><span class="line">        <span class="comment">//如果集合里没有元素，直接返回 []</span></span><br><span class="line">        <span class="keyword">if</span> (!iterator.hasNext())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符串变量</span></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="comment">//将集合里的元素逐个进行拼接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//将元素进行拼接</span></span><br><span class="line">            Element element = iterator.next();</span><br><span class="line">            stringBuilder.append(element);</span><br><span class="line">            <span class="comment">//如果没有下一个元素，则将字符串返回</span></span><br><span class="line">            <span class="keyword">if</span> (! iterator.hasNext())&#123;</span><br><span class="line">                <span class="keyword">return</span> stringBuilder.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则将分隔符逗号&#x27;,&#x27;进行拼接</span></span><br><span class="line">            stringBuilder.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>参考资料:</p><p><a href="https://stackoverflow.com/questions/89891/what-are-the-benefits-of-the-iterator-interface-in-java">https://stackoverflow.com/questions/89891/what-are-the-benefits-of-the-iterator-interface-in-java</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html">https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html</a></p><p><a href="https://juejin.cn/post/6844903460194762760">https://juejin.cn/post/6844903460194762760</a></p><p><a href="https://blog.csdn.net/yajunren/article/details/10312845">https://blog.csdn.net/yajunren/article/details/10312845</a></p><p><a href="https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html">https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html</a></p><p><a href="https://blog.csdn.net/jyg0723/article/details/80498840">https://blog.csdn.net/jyg0723/article/details/80498840</a></p><p>参考资料:</p><p><a href="https://stackoverflow.com/questions/89891/what-are-the-benefits-of-the-iterator-interface-in-java">https://stackoverflow.com/questions/89891/what-are-the-benefits-of-the-iterator-interface-in-java</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html">https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html</a></p><p><a href="https://juejin.cn/post/6844903460194762760">https://juejin.cn/post/6844903460194762760</a></p><p><a href="https://blog.csdn.net/yajunren/article/details/10312845">https://blog.csdn.net/yajunren/article/details/10312845</a></p><p><a href="https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html">https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html</a></p><p><a href="https://blog.csdn.net/jyg0723/article/details/80498840">https://blog.csdn.net/jyg0723/article/details/80498840</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇主要介绍 Collection接口&lt;/p&gt;</summary>
    
    
    
    
    <category term="JAVA SE" scheme="http://chiayhon-cell.gitee.io/tags/JAVA-SE/"/>
    
    <category term="集合框架" scheme="http://chiayhon-cell.gitee.io/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>【常用类】字符串类</title>
    <link href="http://chiayhon-cell.gitee.io/2021/01/25/%E3%80%90%E5%B8%B8%E7%94%A8%E7%B1%BB%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB/"/>
    <id>http://chiayhon-cell.gitee.io/2021/01/25/%E3%80%90%E5%B8%B8%E7%94%A8%E7%B1%BB%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB/</id>
    <published>2021-01-25T12:44:26.000Z</published>
    <updated>2021-01-29T09:15:05.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇主要介绍字符串类 <code>String</code>、<code>StringBuilder</code>、<code>StringBuffer</code>的构造方法、常用的<code>API</code>、以及部分底层原理 。</p><a id="more"></a> <h1 id="1-字符串常量类——-String"><a href="#1-字符串常量类——-String" class="headerlink" title="1. 字符串常量类—— String"></a>1. 字符串常量类—— <code>String</code></h1><blockquote><p><code>String</code> 类代表字符串。Java 程序中的所有字符串字面值（如 <code>&quot;abc&quot;</code> ）都作为此类的实例实现。</p><p>字符串是常量；它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享。</p></blockquote><p>String类位于<code>java.lang</code>包下，实现了三个接口 <code>Serializable</code> , <code>Comparable&lt;String&gt;</code> ,  <code>CharSequence</code></p><h2 id="1-1-常用构造方法"><a href="#1-1-常用构造方法" class="headerlink" title="1.1 常用构造方法"></a>1.1 常用构造方法</h2><p>构造方法摘要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String(String original) </span><br><span class="line"></span><br><span class="line"><span class="comment">//解码操作</span></span><br><span class="line">String(<span class="keyword">byte</span>[] bytes)  通过使用平台的默认字符集解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。</span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, Charset charset)  通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。 </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, String charsetName)  通过使用平台的默认字符集解码指定的 <span class="keyword">byte</span> 子数组，构造一个新的 String。</span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)  通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 子数组，从指定offset索引开始，将length个字符数据转换成字符串对象 </span><br><span class="line"> </span><br><span class="line">String(<span class="keyword">char</span>[] value)  将字符数组转换成字符串对象</span><br><span class="line">String(<span class="keyword">char</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)  从指定offset索引开始 将count个字符数据转换成字符串对象 </span><br></pre></td></tr></table></figure><h2 id="1-2-常用方法"><a href="#1-2-常用方法" class="headerlink" title="1.2 常用方法"></a>1.2 常用方法</h2><h3 id="1-2-1-与数组相关"><a href="#1-2-1-与数组相关" class="headerlink" title="1.2.1 与数组相关"></a>1.2.1 与数组相关</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>byte[]</code></td><td><code>getBytes()</code></td><td>使用平台的默认字符集将此 <code>String</code> 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td><code> byte[]</code></td><td><code>getBytes(Charset charset)</code></td><td>使用给定的 <code>charset</code> 将此 <code>String</code> 编码到 byte 序列，并将结果存储到新的 byte 数组。</td></tr><tr><td><code>byte[]</code></td><td><code>getBytes(String charsetName)</code></td><td>使用指定的字符集将此 <code>String</code> 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td><code>char[]</code></td><td><code>toCharArray()</code></td><td>将此字符串转换为一个新的字符数组。</td></tr><tr><td><code>String[]</code></td><td><code>split(String regex)</code></td><td>根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td><code>String[]</code></td><td><code>split(String regex, int limit)</code></td><td>根据给定正则表达式的匹配拆分此字符串。</td></tr></tbody></table><div class='spoiler collapsed'>    <div class='spoiler-title'>        编码操作示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编码  vs 解码:</span></span><br><span class="line">      <span class="comment">//编码: 看的懂的字符内容 转成 将看不懂的字节数据</span></span><br><span class="line">      <span class="comment">//将字符串转换成utf-8格式下的字节数据</span></span><br><span class="line">      <span class="keyword">byte</span>[] bytes1 = <span class="string">&quot;我们&quot;</span>.getBytes(Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">      System.out.println(Arrays.toString(bytes1));<span class="comment">//[-50, -46, -61, -57]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//解码:将看不懂的字节数据转换成看的懂的字符内容</span></span><br><span class="line">      <span class="comment">//将字节数据转换成gbk编码格式下的字符串</span></span><br><span class="line">      String s2 = <span class="keyword">new</span> String(bytes1, Charset.forName(<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">      System.out.println(s2);<span class="comment">//乱码 (编码不统一)</span></span><br></pre></td></tr></table></figure>    </div></div><div class='spoiler collapsed'>    <div class='spoiler-title'>        拆分操作示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: split方法:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//场景1：用于操作用户信息</span></span><br><span class="line">    String userInfo = <span class="string">&quot;1001_张三_123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下划线分割数据</span></span><br><span class="line">    String[] split = userInfo.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;分割后的数据:&quot;</span> + Arrays.toString(split));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换信息</span></span><br><span class="line">    <span class="keyword">int</span> id = Integer.parseInt(split[<span class="number">0</span>]);</span><br><span class="line">    String name = split[<span class="number">1</span>];</span><br><span class="line">    String password = split[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装数据</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(id, name, password);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户信息：(姓名、id、密码)&quot;</span> + user.getName() + <span class="string">&quot; &quot;</span> + user.getId() + <span class="string">&quot; &quot;</span> + user.getPassword());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: split方法:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//场景2：解决多用户上传重名文件问题</span></span><br><span class="line">    String sourceFile = <span class="string">&quot;a.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用java.util.UUID和标识符_构成唯一标识符</span></span><br><span class="line">    String userSourceFile = UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + sourceFile;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件名： &quot;</span> + userSourceFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//经过传输来到数据处理层，通过split方法获取用户原数据</span></span><br><span class="line">    String[] split = userSourceFile.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户原文件名：&quot;</span> + split[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: split方法_3:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;abcabcabbccaaba&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String[] split(String regex, int limit):在给定正则表达式的匹配项周围拆分此字符串。将字符串拆分为limit部分</span></span><br><span class="line">    String[] str1 = str.split(<span class="string">&quot;a&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(str1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="1-2-2-拼接"><a href="#1-2-2-拼接" class="headerlink" title="1.2.2 拼接"></a>1.2.2 拼接</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>String</code></td><td><code>concat(String str)</code></td><td>将指定字符串与原字符串尾部进行拼接。如果参数字符串的长度为 <code>0</code>，则返回此 <code>String</code> 对象。否则，创建一个新的 <code>String</code> 对象，用来表示由此 <code>String</code> 对象表示的字符序列和参数字符串表示的字符序列连接而成的字符序列。</td></tr><tr><td><code>static String</code></td><td><code>join(CharSequence delimiter, CharSequence... elements)</code></td><td>使用特定的delimiter分隔符将多个字符串数据拼接在一起。</td></tr></tbody></table><blockquote><p>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        拼接操作示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: String 的 +</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String str2 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    str2 = str2 + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jvm对 + 有优化</span></span><br><span class="line">    System.out.println(str1.equals(str2));</span><br><span class="line">    System.out.println(str1 == str2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: concat方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//concat方法 :将指定字符串与原字符串尾部进行拼接(创建了新对象返回)</span></span><br><span class="line">    String str = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个&quot;abcdefg&quot;的新对象</span></span><br><span class="line">    str.concat(<span class="string">&quot;efg&quot;</span>);</span><br><span class="line">    System.out.println(str);<span class="comment">// abcd</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个&quot;abcdefg&quot;的新对象，并赋值给str</span></span><br><span class="line">    str = str.concat(<span class="string">&quot;efg&quot;</span>);</span><br><span class="line">    System.out.println(str); <span class="comment">//abcdefg</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: join方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Integer id = <span class="number">1</span>;</span><br><span class="line">    String name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通拼接:</span></span><br><span class="line">    String str1 = id + <span class="string">&quot;_&quot;</span> + name + <span class="string">&quot;_&quot;</span> + password;</span><br><span class="line">    System.out.println(str1);<span class="comment">//1_张三_123abc</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用join方法拼接</span></span><br><span class="line">    <span class="comment">//join(CharSequence delimiter, CharSequence... elements):返回一个新的String，该字符串由CharSequence elements的副本和指定的delimiter的副本组成。</span></span><br><span class="line">    String[] strings = &#123;id.toString(), name, password&#125;;</span><br><span class="line">    String str2 = String.join(<span class="string">&quot;_&quot;</span>, strings);</span><br><span class="line">    System.out.println(str2);<span class="comment">//1_张三_123abc</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="1-2-3-检索"><a href="#1-2-3-检索" class="headerlink" title="1.2.3 检索"></a>1.2.3 检索</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>char</code></td><td><code>charAt(int index)</code></td><td>查询指定索引的字符的数据</td></tr><tr><td><code>int</code></td><td><code>indexOf(String str)</code></td><td>查询指定字符串第一次出现的索引位置  没有找到 -1</td></tr><tr><td><code>int</code></td><td><code>indexOf(String str, int fromIndex)</code></td><td>从指定索引(包含)开始查询指定字符串第一次出现的索引位置  没有找到 -1</td></tr><tr><td><code>int</code></td><td><code>lastIndexOf(String str)</code></td><td>查询指定字符串最后一次出现的索引位置  没有找到 -1</td></tr><tr><td><code>int</code></td><td><code>lastIndexOf(String str, int fromIndex)</code></td><td>从指定索引(包含)开始查询指定字符串最后出现的索引位置  没有找到 -1</td></tr><tr><td><code>String</code></td><td><code>substring(int beginIndex)</code></td><td>从指定索引开始(包含) 截取部分字符串数据</td></tr><tr><td><code>String</code></td><td><code>substring(int beginIndex, int endIndex)</code></td><td>从指定索引开始(包含) 到结尾索引(不包含) 截取部分字符串数据</td></tr></tbody></table><div class='spoiler collapsed'>    <div class='spoiler-title'>        检索操作示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: charAt方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//char charAt(int index):返回指定索引处的char值。 索引的范围是0到length() - 1</span></span><br><span class="line">    System.out.println(str.charAt(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: indexOf方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int indexOf(String str):返回指定子字符串首次出现在该字符串中的索引。如果此字符串中没有这样的字符，则返回 -1。</span></span><br><span class="line">    <span class="keyword">int</span> index1 = str.indexOf(<span class="string">&quot;o&quot;</span>);</span><br><span class="line">    System.out.println(index1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从指定的索引(包括指定索引)开始，返回指定子字符串首次出现在该字符串中的索引。如果此字符串中没有这样的字符，则返回 -1。</span></span><br><span class="line">    <span class="keyword">int</span> index2 = str.indexOf(<span class="string">&quot;o&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(index2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回最后一次出现的指定子字符串在此字符串内的索引。如果此字符串中没有这样的字符，则返回 -1。</span></span><br><span class="line">    <span class="keyword">int</span> index3 = str.lastIndexOf(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">    System.out.println(index3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索(即从索引大的向索引小的方向搜索)，如果此字符串中没有这样的字符，则返回 -1</span></span><br><span class="line">    <span class="keyword">int</span> index4 = str.lastIndexOf(<span class="string">&quot;l&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    System.out.println(index4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: subSting方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//场景1：电话加密</span></span><br><span class="line">    String phone = <span class="string">&quot;15512345678&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//截取前三个号码</span></span><br><span class="line">    String head = phone.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//截取后四个号码</span></span><br><span class="line">    String end = phone.substring(<span class="number">7</span>);</span><br><span class="line">    <span class="comment">//拼接</span></span><br><span class="line">    System.out.println(<span class="string">&quot;加密后&quot;</span> + head + <span class="string">&quot;****&quot;</span> + end);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n============我是分割符============\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//场景2：解决多用户上传重名文件问题</span></span><br><span class="line">    String sourceFile = <span class="string">&quot;myFile_Java_String.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用java.util.UUID和标识符_构成唯一标识符</span></span><br><span class="line">    String userSourceFile = UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + sourceFile;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件名： &quot;</span> + userSourceFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//经过传输来到数据处理层，通过substring方法获取用户原数据</span></span><br><span class="line">    String str = userSourceFile.substring(userSourceFile.indexOf(<span class="string">&quot;_&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户原文件名：&quot;</span> + str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="1-2-4-判断"><a href="#1-2-4-判断" class="headerlink" title="1.2.4 判断"></a>1.2.4 判断</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>contains(CharSequence s)</code></td><td>判断字符串是否包含指定字符串</td></tr><tr><td><code>boolean</code></td><td><code>equals(Object anObject)</code></td><td>比较内容是否相等</td></tr><tr><td><code>boolean</code></td><td><code>equalsIgnoreCase(String anotherString)</code></td><td>不区分大小写比较内容是否相等</td></tr><tr><td><code>int</code></td><td><code>compareTo(String anotherString)</code></td><td>比较Unicode值大小，返回差值</td></tr><tr><td><code>int</code></td><td><code>compareToIgnoreCase(String str)</code></td><td>不区分大小写比较Unicode值大小，返回差值</td></tr><tr><td><code>boolean</code></td><td><code>isEmpty()</code></td><td>判断字符串是否是空</td></tr><tr><td><code>boolean</code></td><td><code>matches(String regex)</code></td><td>判断字符串是否满足正则格式要求</td></tr><tr><td><code>boolean</code></td><td><code>startsWith(String prefix)</code></td><td>判断字符串是否以…开头</td></tr><tr><td><code>boolean</code></td><td><code>endsWith(String suffix)</code></td><td>判断字符串是否以…结尾</td></tr></tbody></table><div class='spoiler collapsed'>    <div class='spoiler-title'>        判断操作示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: String的判断方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    String str2 = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    <span class="comment">//执行字符串判断操作之前应判断对象是否为null</span></span><br><span class="line">    Objects.requireNonNull(str1);</span><br><span class="line">    Objects.requireNonNull(str2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.boolean isEmpty() : 当且仅当length()为0返回true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否为空:&quot;</span> + str1.isEmpty());</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. boolean contain(CharSequence s) :当且仅当此字符串包含指定的char值序列时，才返回true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1是否包含H:&quot;</span> + str1.contains(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2是否包含H:&quot;</span> + str2.contains(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. boolean equals(Object anObject) :将此字符串与指定对象进行比较。 当且仅当参数不为null并且是一个String对象、表示与此对象相同的字符序列时，结果为true 。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1的内容是否与str2的相等：&quot;</span> + str1.equals(str2));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. boolean equalsIgnoreCase(Object anObject) :与equals作用相同是否相等(忽略大小写)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1的内容是否与str2的相等(忽略大小写)：&quot;</span> + str1.equalsIgnoreCase(str2));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. boolean compareTo(String anotherString):比较两字符串的Unicode值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1的Unicode和str2的Unicode差值：&quot;</span> +  str1.compareTo(str2));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. boolean matches(String regex) :判断此字符串是否与给定的正则表达式匹配。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1是否含有 world! :&quot;</span> + str1.matches(<span class="string">&quot;\\w+ world!&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2是否含有hello?&quot;</span> + str2.matches(<span class="string">&quot;\\w+ world!&quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. boolean startWith(String prefix) 判断是否以指定的前缀开头</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1是否以H开头&quot;</span> + str1.startsWith(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2是否以H开头&quot;</span> + str2.startsWith(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. boolean startsWith(String prefix, ind toOffset) 判断是否以指定的前缀开头，从指定的索引开始判断</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1空格后面是否以W开头&quot;</span> + str1.startsWith(<span class="string">&quot;W&quot;</span>,str1.indexOf(<span class="string">&quot; &quot;</span>) + <span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2空格后面是否以W开头&quot;</span> + str2.startsWith(<span class="string">&quot;W&quot;</span>,str2.indexOf(<span class="string">&quot; &quot;</span>) + <span class="number">1</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. boolean endWith() 判断是否以给定的后缀结尾</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1是否以world!结尾：&quot;</span> + str1.endsWith(<span class="string">&quot;world!&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2是否以world!结尾：&quot;</span> + str2.endsWith(<span class="string">&quot;world!&quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><h3 id="1-2-5-替换"><a href="#1-2-5-替换" class="headerlink" title="1.2.5 替换"></a>1.2.5 替换</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>String</code></td><td><code>replace(char oldChar, char newChar)</code></td><td>使用新字符替换原字符串里面所有的字符内容</td></tr><tr><td><code>String</code></td><td><code>replaceAll(String regex, String replacement)</code></td><td>使用新字符串替换原字符串里面满足正则格式要求的字符串数据</td></tr><tr><td><code>String</code></td><td><code>replaceFirst(String regex, String replacement)</code></td><td>使用新字符串替换原字符串里面第一次满足正则格式要求的字符串数据</td></tr></tbody></table><div class='spoiler collapsed'>    <div class='spoiler-title'>        替换操作示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: replace和replaceAll方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String replace(char oldChar, char newChar):</span></span><br><span class="line">        <span class="comment">//返回一个字符串，该字符串是用newChar替换此字符串中所有出现的oldChar newChar</span></span><br><span class="line">        String replace1 = str.replace(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;replace1 = &quot;</span> + replace1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String replace(CharSequence target, CharSequence replacement):</span></span><br><span class="line">        <span class="comment">//用指定的文字替换序列替换该字符串中与文字目标序列匹配的每个子字符串</span></span><br><span class="line">        String replace2 = str.replace(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;replace2 = &quot;</span> + replace2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String replaceAll(String regex, String replacement):</span></span><br><span class="line">        <span class="comment">//用给定的替换项替换该字符串中与给定的正则表达式匹配的每个子字符串</span></span><br><span class="line">        String replace3 = str.replaceAll(<span class="string">&quot;h+&quot;</span>, <span class="string">&quot;H&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;replace3 = &quot;</span> + replace3);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>    </div></div><p>1.2.6 其他方法</p><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td>String</td><td>toLowerCase()</td><td>转小写</td></tr><tr><td>String</td><td>toUpperCase()</td><td>转大写</td></tr><tr><td>String</td><td>trim()</td><td>去除字符串左右2端的空格</td></tr><tr><td>String</td><td>valueOf(int i) / …</td><td>将其它类型的数据转换成字符串</td></tr><tr><td>int</td><td>length()</td><td>获得字符串长度</td></tr><tr><td>String</td><td>intern()</td><td>获得字符串副本</td></tr></tbody></table><div class='spoiler collapsed'>    <div class='spoiler-title'>        其他方法示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 其他方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="comment">//1. String toUpperCase() ;String toLowerCase() 大小写转换操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;小写转大写：&quot;</span> + str.toUpperCase());</span><br><span class="line">    System.out.println(<span class="string">&quot;大写转小写：&quot;</span> + str.toLowerCase());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.  String trim() 去除两端的空格</span></span><br><span class="line">    String str1 = <span class="string">&quot;         abc &quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;去除两端空格：&quot;</span> + str1.trim());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. int length() 获得字符串长度</span></span><br><span class="line">    System.out.println(<span class="string">&quot;字符串长度：&quot;</span> + str.length());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. intern()：获得字符串副本</span></span><br><span class="line">    System.out.println(<span class="string">&quot;字符串副本：&quot;</span> + str.intern());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//练习String比较</span></span><br><span class="line">    String str4 = <span class="string">&quot;1234&quot;</span>;<span class="comment">//常量池</span></span><br><span class="line">    String str5 = <span class="keyword">new</span> String(<span class="string">&quot;1234&quot;</span>);<span class="comment">//堆</span></span><br><span class="line">    String str6 = <span class="string">&quot;12&quot;</span> + <span class="string">&quot;34&quot;</span>;<span class="comment">//常量池</span></span><br><span class="line">    String str7 = <span class="string">&quot;12&quot;</span>; str7 += <span class="string">&quot;34&quot;</span>;<span class="comment">//堆</span></span><br><span class="line">    String str8 = str5.intern();<span class="comment">//常量池</span></span><br><span class="line"></span><br><span class="line">    System.out.println(str4 == str5);<span class="comment">//false</span></span><br><span class="line">    System.out.println(str4 == str6);<span class="comment">//true</span></span><br><span class="line">    System.out.println(str4 == str7);<span class="comment">//false</span></span><br><span class="line">    System.out.println(str4 == str8);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>    </div></div><h3 id="1-2-6-与正则相关的方法"><a href="#1-2-6-与正则相关的方法" class="headerlink" title="1.2.6 与正则相关的方法"></a>1.2.6 与正则相关的方法</h3><div class='spoiler collapsed'>    <div class='spoiler-title'>        与正则相关的方法    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//boolean matches(String regex)  </span></span><br><span class="line">String[] split(String regex)  </span><br><span class="line"><span class="comment">//String replaceAll(String regex, String replacement)  </span></span><br><span class="line"><span class="function">String <span class="title">replaceFirst</span><span class="params">(String regex, String replacement)</span>  </span></span><br></pre></td></tr></table></figure>    </div></div><blockquote><p>正则概念: 其实就是一个字符串。由一些特殊的字符或者是符号  结合特定的语句 组成字符串。 </p></blockquote><blockquote><p>一般用来==校验，匹配 替换==适合正则格式需求的字符串内容。</p></blockquote><blockquote><p>语法:  String regex = “^([字符/符号]{限定})([]{})([]{})$”;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[^]: 正则以***开头</span><br><span class="line">[$]: 正则以***结尾</span><br><span class="line">[]: 限定正则里面组成的字符内容(通配字符内容) [a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">5</span>,<span class="number">9</span>&#125;  [a-zA-Z\\d]</span><br><span class="line">&#123;&#125;: 限定字符内容出现的次数  &#123;<span class="number">2</span>&#125; &#123;<span class="number">3</span>,<span class="number">5</span>&#125; &#123;<span class="number">1</span>,&#125;</span><br><span class="line">(): 域段/组  \n表示第几个域段的内容  \<span class="number">1</span> 第一个域段的内容   $n 动态获得域段的内容(替换)</span><br><span class="line">\: 转义</span><br><span class="line">*:匹配前面的子表达式零次或多次</span><br><span class="line">+:匹配前面的子表达式<span class="number">1</span>次或多次</span><br><span class="line">.:通配任意一个字符。    \\.</span><br><span class="line">\d:[<span class="number">0</span>-<span class="number">9</span>]    </span><br><span class="line">\w: [A-Za-z0-9_]</span><br><span class="line">\s: 空白字符    </span><br></pre></td></tr></table></figure><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式手册</a></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        正则表达式示例    </div>    <div class='spoiler-content'>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//校验用户名/密码</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用户名规则: 首字母必须大写  数字或者小写字母 3-5  特殊符号_- 1 数字1-3</span></span><br><span class="line">        String username = <span class="string">&quot;Jim123-123&quot;</span>;</span><br><span class="line">        String regex = <span class="string">&quot;^([A-Z]&#123;1&#125;)([0-9a-z]&#123;3,5&#125;)([_-]&#123;1&#125;)([\\d]&#123;1,3&#125;)$&quot;</span>;</span><br><span class="line">        regex = <span class="string">&quot;^[A-Z][\\da-z]&#123;3,5&#125;[_-]\\d&#123;1,3&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* //1.校验正则语言是否ok</span></span><br><span class="line"><span class="comment">        Pattern pattern = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">        //2.创建匹配器</span></span><br><span class="line"><span class="comment">        Matcher matcher = pattern.matcher(username);</span></span><br><span class="line"><span class="comment">        //3.校验</span></span><br><span class="line"><span class="comment">        System.out.println(matcher.matches());*/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(username.matches(regex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加密手机号</span></span><br><span class="line">         </span><br><span class="line">        String phone = <span class="string">&quot;1318011256&quot;</span>;</span><br><span class="line">        <span class="comment">//只是替换中间4个字符为****</span></span><br><span class="line">        String regex = <span class="string">&quot;^(\\d&#123;3&#125;)(\\d&#123;4&#125;)(\\d&#123;4&#125;)$&quot;</span>;</span><br><span class="line">        System.out.println(phone.replaceAll(regex, <span class="string">&quot;$1****$3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//去重重复的字符内容</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">        String str = <span class="string">&quot;我16111avaaab1ccc我&quot;</span>;</span><br><span class="line">        <span class="comment">//将出现&gt;=1次字符使用自己替换</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        String newStr = <span class="keyword">new</span> String(chars);</span><br><span class="line"><span class="comment">//        System.out.println(newStr);//111116aaaabcccv我我  16abcv我</span></span><br><span class="line"></span><br><span class="line">        String regex = <span class="string">&quot;^([.]+)$&quot;</span>;</span><br><span class="line">        regex = <span class="string">&quot;(.)\\1+&quot;</span>;</span><br><span class="line">        System.out.println(newStr.replaceAll(regex, <span class="string">&quot;$1&quot;</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.println(end - begin);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">        <span class="comment">//去重重复的字符内容</span></span><br><span class="line">        String str = <span class="string">&quot;16111avaaab1ccc&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> length = str.length();<span class="comment">//字符串长度</span></span><br><span class="line"></span><br><span class="line">        String[] newString = <span class="keyword">new</span> String[str.length()];<span class="comment">//存储(非重复)唯一的元素</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; length; index++) &#123;<span class="comment">//遍历字符串</span></span><br><span class="line">            Character c = str.charAt(index);<span class="comment">//获得指定索引字符内容</span></span><br><span class="line">            <span class="comment">//判断之前是否在newString数组中是否存储过c</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (String s : newString) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(c.toString(), s)) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                newString[i] = c.toString();</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] copyOf = Arrays.copyOf(newString, i);</span><br><span class="line">        String str1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s : copyOf) &#123;</span><br><span class="line">            str1 = str1 + s;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(str1);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.println(end - begin);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>    </div></div><h2 id="1-3-底层原理"><a href="#1-3-底层原理" class="headerlink" title="1.3 底层原理"></a>1.3 底层原理</h2><h1 id="2-字符串变量类——StringBuffer、Stringbuilder"><a href="#2-字符串变量类——StringBuffer、Stringbuilder" class="headerlink" title="2. 字符串变量类——StringBuffer、Stringbuilder"></a>2. 字符串变量类——<code>StringBuffer</code>、<code>Stringbuilder</code></h1><blockquote><p><code>StringBuffer</code>是<strong>线程安全的可变字符序列</strong>。一个类似于 <code>String</code> 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。</p><p>可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</p></blockquote><blockquote><p><code>StringBuilder</code>是一个可变的字符序列。<strong>此类提供一个与 <code>StringBuffer</code> 兼容的 <code>API</code>**，</strong>但不保证同步**。该类被设计用作 <code>StringBuffer</code> 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 <code>StringBuffer</code> 要快。</p></blockquote><p><code>StringBuffer</code>和<code>StringBuilder</code>类似都位于 <code>java</code>.<code>lang</code> 包下，实现了 <code>Serializable</code>  ,   <code>Appendable</code> , <code>CharSequence</code>接口</p><h2 id="2-1-String、StringBuilder、StringBuffer-对比"><a href="#2-1-String、StringBuilder、StringBuffer-对比" class="headerlink" title="2.1 String、StringBuilder、StringBuffer 对比"></a>2.1 <code>String</code>、<code>StringBuilder</code>、<code>StringBuffer </code>对比</h2><table><thead><tr><th></th><th>线程安全</th><th>效率</th><th>内存</th><th>值是否可变</th></tr></thead><tbody><tr><td>==<code>String</code>==</td><td>安全</td><td>其次</td><td>占用很多内存</td><td>不可变</td></tr><tr><td><code>StringBuffer</code></td><td>安全</td><td>最慢(同步)</td><td>只有一个对象</td><td>可变</td></tr><tr><td><code>==StringBuilder==</code></td><td>不安全</td><td>最快</td><td>只有一个对象</td><td>可变</td></tr></tbody></table><h2 id="2-2-常用构造方法"><a href="#2-2-常用构造方法" class="headerlink" title="2.2 常用构造方法"></a>2.2 常用构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer()  构造一个没有字符的字符串缓冲区，初始容量为<span class="number">16</span>个字符。(数组)</span><br><span class="line">StringBuffer(String str) </span><br></pre></td></tr></table></figure><h2 id="2-3-常用方法"><a href="#2-3-常用方法" class="headerlink" title="2.3 常用方法"></a>2.3 常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(String str)</span>  将指定的字符串拼接原字符末尾</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span></span><br><span class="line"><span class="function">StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span>  </span></span><br><span class="line"><span class="function">StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str </span></span></span><br><span class="line"><span class="function"><span class="params">StringBuffer reverse(）</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">void</span> setCharAt(<span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span>   </span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇主要介绍字符串类 &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;StringBuilder&lt;/code&gt;、&lt;code&gt;StringBuffer&lt;/code&gt;的构造方法、常用的&lt;code&gt;API&lt;/code&gt;、以及部分底层原理 。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JAVA SE" scheme="http://chiayhon-cell.gitee.io/tags/JAVA-SE/"/>
    
    <category term="常用类" scheme="http://chiayhon-cell.gitee.io/tags/%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>【算法】冒泡排序</title>
    <link href="http://chiayhon-cell.gitee.io/2021/01/14/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://chiayhon-cell.gitee.io/2021/01/14/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</id>
    <published>2021-01-13T16:23:32.000Z</published>
    <updated>2021-01-25T00:56:43.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>时间复杂度O(N^2^)，额外空间复杂度O(1)，实现可做到稳定性</p><a id="more"></a><hr><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort_BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    冒泡排序</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组为空或者数组只有一个数，不用排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        外循环控制排序的范围0~end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        end为终止元素，代表参与本轮排序最后一个元素的索引。每一轮排序，都将参与本轮排序的元素里，最大的那个元素放置在end位置上。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        从该数组最后一个元素开始（end = arr.length），每完成一次排序，end的位置向前移动1（end--），直到end到达第一个元素，结束排序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> end = arr.length - <span class="number">1</span>; end &gt; <span class="number">0</span>; end--) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            内循环负责将每轮排序中最大的数排到end的位置上。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            i代表每轮排序的起始元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            每轮排序中，第一次都以数组中第一个元素为起始元素(i = 0)。在本轮的每一次排序中，将本次的起始元素和起始元素后面的一个元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            进行比大小，如果起始元素比它后面一个元素大（ if(arr[i] &gt; arr[i + 1]) ）,则把起始元素放后面，即两元素进行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            交换（swap(arr , arr[i] , arr[i + 1])）。否则，不进行任何操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            在结束本次排序后，如果代表起始元素索引的变量i未到达终止元素前一个位置（ i &lt; end ）,则继续进行下一次排序，直到</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             i = end - 1时，结束本轮排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            但无论本次排序中，起始元素arr[i]及其后面的元素arr[i + 1]谁大谁小，都将i往后移动1（i++），即下一次排序的起始元素为本次</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             后面的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">                    swap(arr, i, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    交换数组中，索引i和索引j上的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line"></span><br><span class="line">        arr[j] = arr[i] ^ arr[j];</span><br><span class="line"></span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;输入数组长度：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个元素:&quot;</span>);</span><br><span class="line"></span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bubbleSort(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;n排序后:&quot;</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组对数器"><a href="#数组对数器" class="headerlink" title="数组对数器"></a>数组对数器</h1><p>时间复杂度高的算法往往比较简单，而时间复杂度低的算法往往需要添加很多操作，这就会使得算法逻辑容易出错。</p><p>使用对数器的技巧，能快速检验出该算法的对错。</p><p>对数器的原理便是生成随机数组产生一个随机样本，通过与时间复杂度高但实现简单不易出错的算法进行比较，若是比较几千几万次没出错，则可说明逻辑正确。否则打印出出错的样本，以便查看出错流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> value, <span class="keyword">int</span> testTimes)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> succeed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; testTimes; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成长度在[0,size]的随机数组</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] arr1 = getRandomArray(size, value); <span class="comment">//随机数组</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] arr2 = copyArray(arr1);  <span class="comment">//随机数组副本</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] arr3 = copyArray(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//不易出错的算法</span></span><br><span class="line"></span><br><span class="line">            Arrays.sort(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//测试的算法</span></span><br><span class="line"></span><br><span class="line">            Sort_BubbleSort.bubbleSort(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isEquals(arr1, arr2))&#123;</span><br><span class="line"></span><br><span class="line">                succeed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                printArray(arr3);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(succeed ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(a + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEquals</span><span class="params">(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.判断是否为空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((arr1 == <span class="keyword">null</span> &amp;&amp; arr2 != <span class="keyword">null</span>) || (arr1 != <span class="keyword">null</span> &amp;&amp; arr2 ==<span class="keyword">null</span>))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr1 == <span class="keyword">null</span> &amp;&amp; arr2 == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 都不为空，判断长度是否相等</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr1.length != arr2.length)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. 长度相等，判断元素是否相等</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arr1[i] != arr2[i])&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4. 都相等则返回true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copyArray(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] copyArr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            copyArr[i] = arr[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> copyArr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getRandomArray(<span class="keyword">int</span> size, <span class="keyword">int</span> value) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">int</span>)((size + <span class="number">1</span>)  Math.random())];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            arr[i] = (<span class="keyword">int</span>)((value + <span class="number">1</span>)  Math.random()) - (<span class="keyword">int</span>)((value + <span class="number">1</span>)  Math.random());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;时间复杂度O(N^2^)，额外空间复杂度O(1)，实现可做到稳定性&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【JAVA SE】一、基本概念与常识</title>
    <link href="http://chiayhon-cell.gitee.io/2021/01/13/%E3%80%90JAVA-SE%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/"/>
    <id>http://chiayhon-cell.gitee.io/2021/01/13/%E3%80%90JAVA-SE%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/</id>
    <published>2021-01-12T16:02:07.000Z</published>
    <updated>2021-02-07T07:39:29.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>java基础总结</p><a id="more"></a><h1 id="1-Java入门"><a href="#1-Java入门" class="headerlink" title="1 Java入门"></a><strong>1 Java入门</strong></h1><h2 id="1-1-java语言特点"><a href="#1-1-java语言特点" class="headerlink" title="1.1 java语言特点"></a><strong>1.1 java语言特点</strong></h2><ul><li>简单易学</li><li><strong>面向对象(封装、继承、多态)</strong></li><li><strong>平台无关性( JVM 实现跨平台)</strong></li><li>可靠性</li><li>安全性</li><li><strong>支持多线程(内置多线程支持)</strong></li><li>支持网络编程且方便</li><li><strong>编译与解释并存</strong></li></ul><h2 id="1-2-JVM-JRE-JDK-介绍及区别"><a href="#1-2-JVM-JRE-JDK-介绍及区别" class="headerlink" title="1.2 JVM, JRE, JDK 介绍及区别"></a><strong>1.2 JVM, JRE, JDK 介绍及区别</strong></h2><p><code>JDK ( Java Development Kit )</code> : java 开发工具包，提供 java 的<strong>开发工具</strong>和<strong>运行环境</strong>  , 开发工具包括编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p><code>JRE ( Java Runtime Environment )</code> : java 运行环境，提供 java程序所需的运行环境 , JRE包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件 。</p><p><code>JVM (Java Virtual Machine)</code> : java虚拟机，作用是将字节码文件翻译成对应平台的机器码 , java跨平台特性的核心。</p><h2 id="1-3-java跨平台性"><a href="#1-3-java跨平台性" class="headerlink" title="1.3 java跨平台性"></a><strong>1.3 java跨平台性</strong></h2><p>jvm是java跨平台的核心，jvm能将字节码文件解释成机器码实现操作系统的API调用，而不同平台有对应版本的jvm。java源程序编译成字节码后，即可在不同平台的jvm下解释、调用操作系统API，实现“一次编译，到处运行”。</p><blockquote><p>Java 能够跨平台运行的核心在于 JVM 。不是 Java 能够跨平台，而是它的 jvm 能够跨平台。我们知道，不同的操作系统向上的 API 肯定是不同的，那么如果我们想要写一段代码调用系统的声音设备，就需要针对不同系统的 API 写出不同的代码来完成动作。</p><p>而 Java 引入了字节码的概念，jvm 只能认识字节码，并将它们解释到系统的 API 调用。针对不同的系统有不同的 jvm 实现，有 Linux 版本的 jvm 实现，也有 Windows 版本的 jvm 实现，但是同一段代码在编译后的字节码是一样的。引用上面的例子，在 Java API 层面，我们调用系统声音设备的代码是唯一的，和系统无关，编译生成的字节码也是唯一的。但是同一段字节码，在不同的 jvm 实现上会映射到不同系统的 API 调用，从而实现代码的不加修改即可跨平台运行。</p></blockquote><h2 id="1-4-“编译与解释并存”？"><a href="#1-4-“编译与解释并存”？" class="headerlink" title="1.4 “编译与解释并存”？"></a><strong>1.4 “编译与解释并存”？</strong></h2><img src="/2021/01/13/%E3%80%90JAVA-SE%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/7a716af0952.webp" class="" title="img"><p>重点讲.class-&gt;机器码 这一步。在这一步 jvm 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的，也就是所谓的热点代码，所以后面引进了 JIT 编译器，JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><h1 id="2-java语法"><a href="#2-java语法" class="headerlink" title="2 java语法"></a><strong>2 java语法</strong></h1><h2 id="2-1-关键字"><a href="#2-1-关键字" class="headerlink" title="2.1 关键字"></a>2.1 关键字</h2><h3 id="2-1-1-continue、break、和-return-的区别是什么？"><a href="#2-1-1-continue、break、和-return-的区别是什么？" class="headerlink" title="2.1.1 continue、break、和 return 的区别是什么？"></a><strong>2.1.1 continue、break、和 return 的区别是什么？</strong></h3><ol><li>continue ：指<strong>跳过</strong>当前的这一次循环，继续下一次循环。</li><li>break ：指<strong>跳出</strong>整个循环体，继续执行循环下面的语句。</li><li>return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：</li></ol><ul><li><ol><li>return; ：直接使用 return 结束方法执行，用于<strong>没有返回值函数的方法</strong></li><li>return value; ：return 一个特定值，用于<strong>有返回值函数的方法</strong></li></ol></li></ul><h2 id="2-2-运算符"><a href="#2-2-运算符" class="headerlink" title="2.2 运算符"></a>2.2 运算符</h2><h3 id="2-2-1-和-equals-的区别"><a href="#2-2-1-和-equals-的区别" class="headerlink" title="2.2.1  ==和 equals 的区别"></a><strong>2.2.1  ==和 equals 的区别</strong></h3><ul><li><p><strong>==</strong> : 作用是判断双等号两边<strong>地址</strong>是否相等。(<strong>基本数据类型 <code>==</code> 比较的是值，引用数据类型 <code>==</code> 比较的是内存地址</strong>)</p><blockquote><p>因为基本数据类型变量存储的是值 , 而引用变量里存储的是所它指向对象的地址 , <code>==</code> 实际上是比较变量存储的内容</p></blockquote></li><li><p><strong>equals()</strong> : 作用是判断两边<strong>对象</strong>是否相等。<code>equals()</code> 方法存在两种使用情况：</p><ol><li>情况 1：类<strong>没有重写</strong> equals()方法。则 <code>equals()</code> 等价于 <code>== </code> 。此时使用的默认是 Object类equals()方法。</li><li>情况 2：类<strong>重写</strong> equals()方法 。则根据重写的规则进行比较。一般的，重写规则为比较对象的“实体内容是否”相等 , 若内容相等则视为对象相等。</li></ol><blockquote><p>注：</p><p>​    1. 许多常用类都重写了equals方法，如 String 、Date、File、包装类等等</p></blockquote></li></ul><h3 id="2-3-amp-和-amp-amp-和"><a href="#2-3-amp-和-amp-amp-和" class="headerlink" title="2.3 &amp;和&amp;&amp;(|和||)"></a><strong>2.3 &amp;和&amp;&amp;(|和||)</strong></h3><ul><li><p>&amp;运算符有两种用法：**(1)按位与；(2)逻辑与**。</p></li><li><p>&amp;&amp;运算符是<strong>短路与</strong>运算。</p></li></ul><p>逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true，整个表达式的值才是true。</p><p>&amp;&amp;之所以称为短路运算，是因为如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。</p><h2 id="2-3-java数据类型"><a href="#2-3-java数据类型" class="headerlink" title="2.3 java数据类型"></a><strong>2.3 java数据类型</strong></h2><h3 id="2-3-1-Java-中的基本数据类型种类、对应的包装类型、占用多少字节"><a href="#2-3-1-Java-中的基本数据类型种类、对应的包装类型、占用多少字节" class="headerlink" title="2.3.1 Java 中的基本数据类型种类、对应的包装类型、占用多少字节"></a><strong>2.3.1 Java 中的基本数据类型种类、对应的包装类型、占用多少字节</strong></h3><p>Java中有 <strong>8 种基本数据类型</strong>，分别为：</p><ul><li>6 种数字类型 ：byte、short、int、long、float、double</li><li>1 种字符类型：char</li><li>1 种布尔型：boolean。</li></ul><p>这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>int (默认整型)</td><td>32</td><td>4</td><td>0</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>char</td><td>16</td><td>2</td><td>‘u0000’</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double (默认浮点型)</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><p>对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p><p>注意：</p><ol><li>Java 里使用 long 类型的数据一定要在数值后面加上 <strong>L</strong>，否则将作为整型解析：</li><li>Java 里使用 float类型的数据一定要在数值后面加上 <strong>F</strong>，否则将作为双浮点·型解析：</li><li>char a = ‘h’char :单引号，String a = “hello” :双引号</li></ol><h1 id="3-面向对象基础"><a href="#3-面向对象基础" class="headerlink" title="3 面向对象基础"></a>3 面向对象基础</h1><h1 id="4-常用类"><a href="#4-常用类" class="headerlink" title="4 常用类"></a>4 常用类</h1><h2 id="4-1-Object类"><a href="#4-1-Object类" class="headerlink" title="4.1 Object类"></a>4.1 Object类</h2><h3 id="4-1-1-hashCode方法的作用？"><a href="#4-1-1-hashCode方法的作用？" class="headerlink" title="4.1.1 hashCode方法的作用？"></a>4.1.1 hashCode方法的作用？</h3><p>　　返回一个与对象物理地址相关联的哈希码值，能够在使用哈希表结构时受益。</p><h3 id="4-1-2-equals方法的常规协定有哪些？"><a href="#4-1-2-equals方法的常规协定有哪些？" class="headerlink" title="4.1.2 equals方法的常规协定有哪些？"></a>4.1.2 equals方法的常规协定有哪些？</h3><p>对于任何非空对象，应遵守以下约定：</p><ul><li><strong>自反性：</strong>对于任何非空参数 <code>x</code> ， <code>x.equals(x)</code>应该返回true 。（自调用equals为true）</li><li><strong>对称性：</strong>对于任何非空参数 <code>x</code> 和 <code>y</code> ， 若<code>x.equals(y)</code> 返回true，则 <code>y.equals(x)</code> 也应该返回 true 。（两参互调用结果应相同）</li><li><strong>一致性：</strong>对于任何非空参数 <code>x</code> 和 <code>y</code>  ，只要未修改对象的 <code>equals</code> 比较时使用的信息，则多次调用 <code>x.equals(y)</code> 结果始终不变。（未修改时结果始终一致）</li><li><strong>传递性：</strong>对于 <code>x</code> ， <code>y</code> 和 <code>z</code> 任何非空参数，如果 <code>x.equals(y)</code> 返回 true 且 <code>y.equals(z)</code> 返回 true ，则 <code>x.equals(z)</code> 应该返回 true</li><li>对于任何非 nul 参数 <code>x</code> ， <code>x.equals(null)</code> 应该返回 false </li></ul><h2 id="4-1-2-equals方法和hashCode方法有什么关联"><a href="#4-1-2-equals方法和hashCode方法有什么关联" class="headerlink" title="4.1.2 equals方法和hashCode方法有什么关联?"></a>4.1.2 equals方法和hashCode方法有什么关联?</h2><p>　　</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;java基础总结&lt;/p&gt;</summary>
    
    
    
    
    <category term="JAVA SE" scheme="http://chiayhon-cell.gitee.io/tags/JAVA-SE/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo+GitHub搭建个人博客】三、主题优化</title>
    <link href="http://chiayhon-cell.gitee.io/2020/12/31/Hexo3/"/>
    <id>http://chiayhon-cell.gitee.io/2020/12/31/Hexo3/</id>
    <published>2020-12-31T05:30:06.000Z</published>
    <updated>2021-01-27T07:57:51.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前两篇分别介绍了如何搭建一个Hexo框架即如何利用其来进行写作，本篇主要针对Next主题对博客进行各项优化。</p><a id="more"></a><h1 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h1><h2 id="隐藏功能"><a href="#隐藏功能" class="headerlink" title="隐藏功能"></a>隐藏功能</h2><div class='spoiler collapsed'>    <div class='spoiler-title'>        示例    </div>    <div class='spoiler-content'>        <p>(普通文本)…</p><table><thead><tr><th>表格</th><th>…</th></tr></thead><tbody><tr><td>数据…</td><td>…</td></tr></tbody></table><figure class="highlight plain"><figcaption><span>代码块</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure>    </div></div><p><a href="https://blog.csdn.net/qq_36408085/article/details/104323711">参考博客</a></p><p>看板娘</p><p><a href="https://www.zh66.club/2019/09/08/hexo-helper-live2d/">https://www.zh66.club/2019/09/08/hexo-helper-live2d/</a></p><p><a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p><p><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a></p><p><a href="http://yearito.cn/posts/hexo-writing-skills.html#%E6%8F%92%E5%85%A5Swig%E4%BB%A3%E7%A0%81">http://yearito.cn/posts/hexo-writing-skills.html#%E6%8F%92%E5%85%A5Swig%E4%BB%A3%E7%A0%81</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前两篇分别介绍了如何搭建一个Hexo框架即如何利用其来进行写作，本篇主要针对Next主题对博客进行各项优化。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【Hexo+GitHub搭建个人博客】二、框架使用及技巧</title>
    <link href="http://chiayhon-cell.gitee.io/2020/12/31/Hexo2/"/>
    <id>http://chiayhon-cell.gitee.io/2020/12/31/Hexo2/</id>
    <published>2020-12-31T04:48:42.000Z</published>
    <updated>2021-01-25T01:18:20.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　在框架建立起来后，则接下来便是要学会如何使用，其中包括Hexo的命令包括初始化文件夹、新建博文、发布博文、启动本地服务器等等。同时学习如何使用一些小技巧，</p><a id="more"></a><h1 id="Hexo文件结构"><a href="#Hexo文件结构" class="headerlink" title="Hexo文件结构"></a>Hexo文件结构</h1><p>　　在介绍命令前，先了解一下目录下的主要文件夹:</p><ul><li><code>_config.yml</code> :  博客配置文件，配置了<strong>博客的各项设置</strong></li><li><code>source</code> : 资源文件夹，里面有所有的<strong>博文或是独立页面</strong>，存放着文章、草稿等资源</li><li><code>themes</code> : 主题文件夹，包含了一个或多个<strong>主题</strong>，Hexo 会根据主题来生成静态页面</li><li><code>scaffolds</code>  : 模板文件夹，当新建文章时，Hexo会根据模板文件夹里的<strong>模板</strong>来建立文件。</li></ul><h1 id="Hexo基础命令"><a href="#Hexo基础命令" class="headerlink" title="Hexo基础命令"></a>Hexo基础命令</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init<span class="meta"> [博客文件夹名]</span></span><br></pre></td></tr></table></figure><p>　　<strong>新建一个博客网站</strong>，如果没有指定文件夹，就在当前目录创建默认文件夹</p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> [layout] [Option] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><p>　　<strong>创建一篇博文</strong>:</p><p>　　<code>layout</code>是可选项，用来设置布局(layout)参数。常见布局的有 <code>post</code>（文章) 、<code>page</code>(页面) 、<code>draft</code> (草稿)三种，如果不填写，默认将会选择 <code>post</code>。</p><p>　　<code>title</code> 则是<strong>必选项</strong>，会做为文件名称，同时生成的文件就是 <code>&lt;title&gt;.md</code> 。例如，下面会生成一个标题为 <code>新的博客</code> 的 <code>新的博客.md</code> 文件</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;新的博客&quot;</span></span><br></pre></td></tr></table></figure><p>　　但是有时候我们创建一篇博文，它的标题和文件名不一定是相同的，这时候就要用到 <code>Option</code> 参数了。</p><p>　　<code>Option</code>是可选项，默认情况下，Hexo会使用文章的标题来决定文章文件的路径。可以使用 <code>-p</code> 或<code>--path</code> 参数来<strong>自行决定文件</strong>的文件名和标题：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> --path about/test <span class="string">&quot;新的标题&quot;</span>  </span><br></pre></td></tr></table></figure><p>　　上述命令将在 <code>source/about/</code> 创建文件名为 <code>test.md</code> ，标题为 <code>新的标题</code> 文件。</p><table><thead><tr><th>参数Option</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r</code>, <code>--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s</code>, <code>--slug</code></td><td>自定义帖子的URL</td></tr></tbody></table><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish  <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　发布命令，会将<code>/source/_drafts</code>目录下的草稿发布出去。如果创建了一个草稿，想要发布出去，则需要用到此命令。<code>&lt;filename&gt;</code> 则是草稿的文件名，注意<strong>不包括后缀名</strong>。</p><p>　　 </p><h2 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>　　启动服务器，将你的博客暂时可以<strong>从本地直接访问</strong>，方便查看效果。默认情况下，访问网址为： <code>http://localhost:4000/</code>，按 <code>Ctrl + c</code> 停止.</p><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br></pre></td></tr></table></figure><p>　　<strong>清除</strong>缓存文件和已生成的静态文件。在某些情况，如对站点的更改<strong>无论如何也不生效</strong>，可能需要运行该命令</p><p>　　<code>hexo generate</code> 与 <code>hexo deploy</code> 这两个命令和部署有关，会在具体讲如何部署上线时展开讲解。</p><h1 id="博文相关"><a href="#博文相关" class="headerlink" title="博文相关"></a>博文相关</h1><p>　　明白了如何使用 <code>Hexo</code> 生成想要的文件以及如何预览之后,就可以开始进行博文的撰写了。在 <code>source</code> 目录下，可以找到所有生成的文章，可以使用任何喜欢的文本编辑器进行编辑。Hexo 的博文使用的是 markdown 来撰写的，当然也可以插入一些 HTML 代码来进行自定义。这一部分主要是关于文章帖子(post)。</p><h2 id="语法：Markdown"><a href="#语法：Markdown" class="headerlink" title="语法：Markdown"></a>语法：Markdown</h2><p>　　Markdown 是一种标记语言，语法简单，易阅读易编写，可以让用户完全脱离鼠标写出样式丰富的文档。其语法可以自行去学习<a href="https://www.markdownguide.org/basic-syntax">基础语法</a>和<a href="https://www.markdownguide.org/extended-syntax">扩展语法</a>，这里仅介绍几个。</p><h3 id="代码块进阶用法"><a href="#代码块进阶用法" class="headerlink" title="代码块进阶用法"></a>代码块进阶用法</h3><p>　　可以通过为代码块附加参数的形式为其添加更丰富的信息提示，效果如下：</p><figure class="highlight java"><figcaption><span>java</span><a href="https://www.baidu.com/">百度</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure><p>　　用法规则：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">``` [language] [title] [url] [link text]</span></span><br><span class="line"><span class="code">code snippet</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure><p>　　其中，各参数意义如下：</p><ul><li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li><li>title：代码块标题，将会显示在左上角</li><li>url：链接地址，如果没有指定 link text 则会在右上角显示 link</li><li>link text：链接名称，指定 url 后有效，将会显示在右上角</li></ul><p>　　url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以 url 为分界，左侧除了第一个单词会被解析为 language，其他所有单词都会被解析为 title，而右侧的所有单词都会被解析为 link text。</p><p>　　如果不想填写 title，可以在 language 和 url 之间添加至少三个空格。</p><h2 id="技巧：内置标签"><a href="#技巧：内置标签" class="headerlink" title="技巧：内置标签"></a>技巧：内置标签</h2><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Hexo 每一篇生成的文章开头都会有一段由两行 「—」包裹起来的内容，称为 <strong>Front-matter</strong>，这是配置文章信息的部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">--- </span></span><br><span class="line"></span><br><span class="line"><span class="attr">title:</span> <span class="string">draft</span></span><br><span class="line"></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-12-31 23:25:36</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>　　<code>title</code> 指的是博文的标题，默认生成的标题与使用 <code>hexo new</code> 命令中输入的 <code>&lt;title&gt;</code> 相同，但是可以自行更改。</p><p>　　<code>date</code> 指的是文件被发布的时间，如果是直接生成的时间，那就与生成时间相同，如果是由 draft 通过 <code>hexo publish</code> 命令发布的，那就与 <code>publish</code> 的时间相同。</p><p>　　<code>tags</code> 指的是文章的标签，可以打上多个，如下所示：　　</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tags:</span></span><br><span class="line"></span><br><span class="line">    - tag1</span><br><span class="line"></span><br><span class="line">    - tag2</span><br><span class="line"></span><br><span class="line">    - tag3</span><br></pre></td></tr></table></figure><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>　　每一篇生成的博文应该都会出现在 <code>Hexo</code> 的主页上。如果不使用摘要，那么每一篇文章都会<strong>全文显示</strong>在主页上，这是很不美观，也很浪费资源的一种方式。</p><p>　　如果使用摘要，那么主页上只会显示一小段内容，不仅吸引了读者，还能使得整个博客网站更加优雅。摘要必须写在文章开头，紧接着文件头部。</p><p>　　当摘要写作完成后，另起一行输入 <code>&lt;!-- more --&gt;</code> 即可，这样上面的内容就能被识别，并显示在主页上。不过，这段摘要同样也会在博文页面中被显示出来，需要注意。</p><p>　　效果如下：</p><img src="/2020/12/31/Hexo2/image-20201231134523022.png" class="" title="image-20201231134523022"><h3 id="添加emoji表情"><a href="#添加emoji表情" class="headerlink" title="添加emoji表情"></a>添加emoji表情</h3><p>　　直接去❤️<a href="https://emojipedia.org/">这里</a>复制想要的表情即可</p><h3 id="高亮代码块"><a href="#高亮代码块" class="headerlink" title="高亮代码块"></a>高亮代码块</h3><p>　　设置 <code>highlight.enable: true</code> 和 <code>highlight.auto_detect: true</code></p><p>　　如果将语言设置成 <code>diff</code> 可在代码前面添加 <code>+</code> 、<code>-</code> 号高亮代码，能比较好的反映代码的增删。</p><figure class="highlight diff"><figcaption><span>/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line"><span class="deletion">- wrap: true</span></span><br><span class="line"><span class="addition">+ wrap: true</span></span><br></pre></td></tr></table></figure><div class="note info"><p>更多高亮设置可参考<a href="https://www.ofind.cn/blog/HEXO/HEXO%E4%B8%8B%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E6%8B%93%E5%B1%95%E4%BF%AE%E6%94%B9.html#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E6%A0%87%E8%AE%B0">这篇博文</a></p></div><h3 id="note-笔记标签"><a href="#note-笔记标签" class="headerlink" title="note 笔记标签"></a>note 笔记标签</h3><p>　　通过 note 标签可以为段落添加背景色，效果如上，语法如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">note</span> class %&#125;</span></span><br><span class="line"><span class="xml">文本内容 (支持行内标签)</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span></span><br></pre></td></tr></table></figure><p>　　支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定 class。</p><h3 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h3><p>通过 label 标签可以为文字添加背景色，语法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label [<span class="class"><span class="keyword">class</span>]<span class="meta">@text</span>  %&#125;</span></span><br></pre></td></tr></table></figure><p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，默认使用 <code>default</code> 作为缺省。</p><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I heard the echo, &#123;% label default@from the valleys and the heart %&#125;</span><br><span class="line">Open to the lonely soul of &#123;% label info@sickle harvesting %&#125;</span><br><span class="line">Repeat outrightly, but also repeat the well-being of</span><br><span class="line">Eventually &#123;% label warning@swaying in the desert oasis %&#125;</span><br><span class="line">&#123;% label success@I believe %&#125; I am</span><br><span class="line">&#123;% label primary@Born as the bright summer flowers %&#125;</span><br><span class="line">Do not withered undefeated fiery demon rule</span><br><span class="line">Heart rate and breathing to bear &#123;% label danger@the load of the cumbersome %&#125;</span><br><span class="line">Bored</span><br></pre></td></tr></table></figure><blockquote><p>I heard the echo, <mark class="label default">from the valleys and the heart</mark><br>Open to the lonely soul of <mark class="label info">sickle harvesting</mark><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <mark class="label warning">swaying in the desert oasis</mark></p><mark class="label success">I believe</mark> I am<mark class="label primary">Born as the bright summer flowers</mark><p>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <mark class="label danger">the load of the cumbersome</mark><br>Bored</p></blockquote><h3 id="button-按钮"><a href="#button-按钮" class="headerlink" title="button 按钮"></a>button 按钮</h3><p>通过 button 标签可以快速添加带有主题样式的按钮，语法如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% button <span class="regexp">/path/</span>to<span class="regexp">/url/</span>, text, icon [<span class="keyword">class</span>], title %&#125;</span><br></pre></td></tr></table></figure><p>也可简写为：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn <span class="regexp">/path/</span>to<span class="regexp">/url/</span>, text, icon [<span class="keyword">class</span>], title %&#125;</span><br></pre></td></tr></table></figure><p>其中， 图标 ID 来源于 <a href="https://fontawesome.com/v4.7.0/icons/">FontAwesome</a> 。</p><p>使用示例如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 标题,, 标题 %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 图标, home %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span></span><br></pre></td></tr></table></figure><a class="btn" href="#">文本</a><a class="btn" href="#" title="标题">文本 & 标题</a><a class="btn" href="#"><i class="fa fa-home"></i>文本 & 图标</a><a class="btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>文本 & 大图标 (固定宽度)</a><h3 id="tab-标签"><a href="#tab-标签" class="headerlink" title="tab 标签"></a>tab 标签</h3><p>tab 标签用于快速创建 tab 选项卡，语法如下</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> [Unique name], [index] %&#125;</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span></span><br><span class="line"><span class="xml">  标签页内容（支持行内标签）</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>Unique name: 全局唯一的 Tab 名称，将作为各个标签页的 id 属性前缀</li><li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为 - 1 则默认隐藏所有标签页</li><li>Tab caption: 当前标签页的标题，如果不指定则会以 Unique name 加上索引作为标题</li><li>icon: 在标签页标题中添加 Font awesome 图标</li></ul><p>使用示例如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> Tab标签列表 %&#125;</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- tab 标签页1 --&gt;</span></span></span><br><span class="line"><span class="xml">    标签页1文本内容</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- tab 标签页2 --&gt;</span></span></span><br><span class="line"><span class="xml">    标签页2文本内容</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- tab 标签页3 --&gt;</span></span></span><br><span class="line"><span class="xml">    标签页3文本内容</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br></pre></td></tr></table></figure><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">标签页1</a></li><li class="tab"><a href="#tab标签列表-2">标签页2</a></li><li class="tab"><a href="#tab标签列表-3">标签页3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  标签页1文本内容</p></div><div class="tab-pane" id="tab标签列表-2"><p>  标签页2文本内容</p></div><div class="tab-pane" id="tab标签列表-3"><p>  标签页3文本内容</p></div></div></div><h3 id="引用站内链接"><a href="#引用站内链接" class="headerlink" title="引用站内链接"></a>引用站内链接</h3><p>可以通过如下语法引入站内文章的地址或链接：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">post_path</span> slug %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">post_link</span> slug [title] %&#125;</span></span><br></pre></td></tr></table></figure><p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的 Markdown 文件名。</p><p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p><p>如以下标签将会生成  </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> post_path Hex<span class="meta">o2</span> <span class="meta">%</span>&#125;</span><br></pre></td></tr></table></figure><p>而以下标签则会生成 <a href="/2020/12/31/Hexo2/" title="链接标题">链接标题</a></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">post_link</span> Hexo2 链接标题 %&#125;</span></span><br></pre></td></tr></table></figure><p>这种站内引用方式比直接使用 url 引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要 Markdown 文件名没有发生改变，引用链接都不会失效。</p><h3 id="插入-Swig-代码"><a href="#插入-Swig-代码" class="headerlink" title="插入 Swig 代码"></a>插入 Swig 代码</h3><p>如果需要在页面内插入 Swig 代码，包括原生 HTML 代码，JavaScript 脚本等，可以通过 raw 标签来禁止 Markdown 引擎渲染标签内的内容。语法如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span></span><br></pre></td></tr></table></figure><p>该标签通常用于在页面内引入三方脚本实现特殊功能，尤其是当该三方脚本尚无相关 hexo 插件支持的时候，可以通过写原生 Web 页面的形式引入脚本并编写实现逻辑。</p><h3 id="插入-Gist"><a href="#插入-Gist" class="headerlink" title="插入 Gist"></a>插入 Gist</h3><p>如果需要在页面内插入 Gist 上的代码片段时，可以使用如下标签:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>gist_id: Gist 仓库页面 url 中最后一段随机字符串</li><li>filename: Gist 中的文件名</li></ul><p>如果 Gist 中只有一个文件，可以不用指定 filename，也可以通过 JavaScript 脚本的形式直接引入，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 Gist 中有多个文件，可以在标签内输入 filename 来指定只引入某个文件，如果没有指定 filename，将会引入 Gist 中的所有文件。另外，引用 JavaScript 脚本形式无法精确控制只引入某一个文件，将会同时引入 Gist 中的所有文件。</p><p>如果指定了与 Gist 无法匹配的 filename，页面上将不会显示任何标签内容。所以，一般在 Gist 只有一个文件的情况下无需指定 filename。</p><p>在页面中引入 Gist 代码段将会同时从 github 服务器上下载脚本与 CSS 样式文件，由于国内访问 github 服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。</p><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><p>　　个人用的写作工具是<a href="https://typora.io/#windows">Typora</a>，Typora有关写作和图片处理经验可以参考<a href="https://cloud.tencent.com/developer/article/1600295">这篇文章</a>，这里就不多叙述了</p><h1 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h1><p>　　博客除了主页，还有很多其他页面，Next允许用户在菜单中添加自定义页面。这一部分主要是关于页面(page)。</p><p>至此如何使用框架也基本介绍完了，更详细的内容详见<a href="https://hexo.io/docs/">Hexo官方文档</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　在框架建立起来后，则接下来便是要学会如何使用，其中包括Hexo的命令包括初始化文件夹、新建博文、发布博文、启动本地服务器等等。同时学习如何使用一些小技巧，&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://chiayhon-cell.gitee.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo+GitHub搭建个人博客】一、框架建立</title>
    <link href="http://chiayhon-cell.gitee.io/2020/12/31/Hexo1/"/>
    <id>http://chiayhon-cell.gitee.io/2020/12/31/Hexo1/</id>
    <published>2020-12-31T02:50:00.000Z</published>
    <updated>2021-01-25T01:19:19.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　当今市场上有着众多创作平台如知乎、微信公众好号、简书，为啥还要这么麻烦的去搭建一个个人博客？我想自己的答案就是想有一个安静的地方记录生活吧。不用注册登录账号、不用注意内容审核、不用担心文章消失，即使没有读者，我个人还是沉浸其中。</p><p>　　对于博客的搭建，静态站点对于动态站点而言，有着相对较快的访问速度，能托管在 github 上简单又快捷，于是选择了目前流行且免费的 Hexo 框架</p><a id="more"></a><h1 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h1><p>　　在搭建前需要准备一下搭建环境，接下来的操作是在<strong>命令行</strong>中进行　　</p><h2 id="Github-的注册"><a href="#Github-的注册" class="headerlink" title="Github 的注册"></a>Github 的注册</h2><p>　　注册一个 <a href="https://github.com/join?source=login">Github</a> 账号　　</p><h2 id="Git-的下载与安装"><a href="#Git-的下载与安装" class="headerlink" title="Git 的下载与安装"></a>Git 的下载与安装</h2><p>　　<a href="https://git-scm.com/downloads">下载Git</a> 并进行安装，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">&quot;你的GitHub邮箱&quot;</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;你的GitHub用户名&quot;</span></span><br></pre></td></tr></table></figure><p>　　Git 是版本控制系统，通俗的说就是提交更改项目等操作的工具。Git 在提交更改的时候，会需要提交者的邮箱和用户名，这可以在命令行窗口通过以下命令来设置：，–global 代表全局配置，若以后想为单个项目配置，则在项目文件夹输入去掉–global 后的命令　　</p><h2 id="Node-js下载"><a href="#Node-js下载" class="headerlink" title="Node.js下载"></a>Node.js下载</h2><p>　　<a href="https://nodejs.org/en/download/">下载 Node.js</a> 并安装　　　　</p><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><p>　　在<strong>命令行</strong>中输入下面命令来安装 Hexo，安装完成后输入<code>hexo -v</code>验证是否安装成功。　　</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>　　-g表示全局安装，会将 Hexo 命令加入环境变量中，以使其在 cmd 下有效。</p><p>　　<strong>新建</strong>存放博客的目录，然后在<strong>该路径下执行</strong>初始化命令：　　</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">init</span></span><br></pre></td></tr></table></figure><p>　　执行完毕后，输入<code>dir</code>将会生成以下文件结构：　　</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       <span class="regexp">//</span>依赖安装目录</span><br><span class="line">├── scaffolds          <span class="regexp">//</span>模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         <span class="regexp">//</span>草稿模板</span><br><span class="line">|   ├── page.md          <span class="regexp">//</span>页面模板</span><br><span class="line">|   └── post.md          <span class="regexp">//</span>文章模板</span><br><span class="line">├── source             <span class="regexp">//</span>资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           <span class="regexp">//</span>文章目录</span><br><span class="line">├── themes             <span class="regexp">//</span>主题文件夹</span><br><span class="line">|   └── landscape        <span class="regexp">//</span>默认主题</span><br><span class="line">├── .gitignore         <span class="regexp">//</span>指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        <span class="regexp">//</span>站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br></pre></td></tr></table></figure><p>　　在根目录下执行如下命令或 <code>hexo s</code> 启动 hexo 的内置 Web 服务器 　　</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>　　该命令将会调用Markdown引擎解析项目中的博客内容生成网页资源，资源将会存于内存中，所以用户执行完命令之后在项目文件夹中是找不到相关的Web资源目录的。该命令还会启动一个简易的 Web服务器用于提供对内存中网页资源的访问（工作机制类似于webpack-dev-server），Web 服务器默认监听 4000 端口，用户可在浏览器中通过地址 <code>localhost:4000</code> 访问博客。</p><p><img src="https://z4a.net/images/2020/12/31/image539b863fea85a0b8.png" alt="Hexo默认首页"></p><p>　　当 4000 端口已被其他应用占用时，可以添加 -p / –port 参数来设置 Web 服务监听的端口号，如 <code>hexo s -p 8000</code></p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>　　当然现在这个页面太丑了，换一个比较入眼的主题，这里选择<code>Next</code>主题示例，在博客根目录右键打开<code>Git Bash here</code>，输入如下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/next-theme/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>　　等待下载完成，打开站点配置文件<code>_config.yml</code> 文件，将 <code>theme</code> 字段的值修改为 <code>next</code>，即：</p><figure class="highlight yml"><figcaption><span>/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>　　然后重启内在服务器 <code>hexo s</code> 即可看到新主题：</p><p><img src="https://z4a.net/images/2020/12/31/image4285b977a8308096.png" alt="Next主题"></p><figure class="highlight yml"><figcaption><span>/themes/next/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span>      <span class="comment">#选择Gemini风格</span></span><br></pre></td></tr></table></figure><h1 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h1><p>　　框架建立起来了，这时候则需要配置站点的信息，首先先介绍框架目录下比较重要的文件和文件夹：</p><ul><li>_config.yml :配置文件，配置了<strong>博客的各项设置</strong></li><li>source :资源文件夹，里面有所有的<strong>博文或是独立页面</strong></li><li>themes :主题文件夹，包含了一个或多个<strong>主题文件夹</strong></li><li>scaffolds :模版文件夹,新建文章时，Hexo 会根据文件夹里的<strong>模板</strong>来建立文件。</li></ul><h2 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h2><p>　　打开 <code>_config.yml 文件</code>，可以对站点进行配置，<code>#</code>后面表示注释　　</p><figure class="highlight yml"><figcaption><span>/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">chiayhon的小站</span>       <span class="comment"># 站点主题，标签页主题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;欢迎光临&#x27;</span>         <span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;渴望早睡晚起&#x27;</span>     <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">chiayhon&#x27;s</span> <span class="string">blog</span>       <span class="comment"># 网站关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">chiayhon</span>                <span class="comment"># 作者名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>                 <span class="comment"># 语言设置为中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span>       <span class="comment"># 时区设为上海</span></span><br></pre></td></tr></table></figure><h2 id="博文字数统计"><a href="#博文字数统计" class="headerlink" title="博文字数统计"></a>博文字数统计</h2><p>　　先安装字数统计插件:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">word</span>-counter</span><br></pre></td></tr></table></figure><p>　　然后在博客配置文件末尾添加：</p><figure class="highlight yml"><figcaption><span>/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>    <span class="comment"># 帖子字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>    <span class="comment"># 预计阅读时间</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span>    <span class="comment"># 在页脚显示所有帖子总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span>    <span class="comment"># 在页脚显示所有帖子的阅读时间</span></span><br></pre></td></tr></table></figure><p>　　配置完博客如下：</p><p><img src="https://z4a.net/images/2020/12/31/3.png" alt="信息配置完成"></p><p>　　</p><div class="note success"><p>至此，一个最基本的框架已经被搭建起来了，框架建立篇到此结束，本框架版本是基于Hexo 5.3.0 + Node.js 12.13.0 + Git 2.23.0 + Next 8.1.0搭建的，不同版本可能会不兼容，若是安装出错需核对版本。</p></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　当今市场上有着众多创作平台如知乎、微信公众好号、简书，为啥还要这么麻烦的去搭建一个个人博客？我想自己的答案就是想有一个安静的地方记录生活吧。不用注册登录账号、不用注意内容审核、不用担心文章消失，即使没有读者，我个人还是沉浸其中。&lt;/p&gt;
&lt;p&gt;　　对于博客的搭建，静态站点对于动态站点而言，有着相对较快的访问速度，能托管在 github 上简单又快捷，于是选择了目前流行且免费的 Hexo 框架&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://chiayhon-cell.gitee.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
