<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chiayhon的小站</title>
  
  <subtitle>欢迎光临</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-25T12:45:09.604Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chiayhon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【常用类】字符串类</title>
    <link href="http://example.com/2021/01/25/%E3%80%90%E5%B8%B8%E7%94%A8%E7%B1%BB%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB/"/>
    <id>http://example.com/2021/01/25/%E3%80%90%E5%B8%B8%E7%94%A8%E7%B1%BB%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB/</id>
    <published>2021-01-25T12:44:26.000Z</published>
    <updated>2021-01-25T12:45:09.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇主要介绍了字符串类<code>String</code>、<code>StringBuilder</code>、<code>StringBuffer</code>的构造方法、常用的<code>API</code>、以及部分底层原理。</p><a id="more"></a><h1 id="1-字符串常量类——String"><a href="#1-字符串常量类——String" class="headerlink" title="1. 字符串常量类——String"></a>1. 字符串常量类——<code>String</code></h1><blockquote><p><code>String</code> 类代表字符串。Java 程序中的所有字符串字面值（如 <code>&quot;abc&quot;</code> ）都作为此类的实例实现。</p><p>字符串是常量；它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享。</p></blockquote><p>String类位于<code>java.lang</code>包下，实现了三个接口 <code>Serializable</code> , <code>Comparable&lt;String&gt;</code> ,  <code>CharSequence</code></p><h2 id="1-1-常用构造方法"><a href="#1-1-常用构造方法" class="headerlink" title="1.1 常用构造方法"></a>1.1 常用构造方法</h2><p>构造方法摘要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String(String original) </span><br><span class="line"></span><br><span class="line"><span class="comment">//解码操作</span></span><br><span class="line">String(<span class="keyword">byte</span>[] bytes)  通过使用平台的默认字符集解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。</span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, Charset charset)  通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 数组，构造一个新的 String。 </span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, String charsetName)  通过使用平台的默认字符集解码指定的 <span class="keyword">byte</span> 子数组，构造一个新的 String。</span><br><span class="line">String(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)  通过使用指定的 charset 解码指定的 <span class="keyword">byte</span> 子数组，从指定offset索引开始，将length个字符数据转换成字符串对象 </span><br><span class="line"> </span><br><span class="line">String(<span class="keyword">char</span>[] value)  将字符数组转换成字符串对象</span><br><span class="line">String(<span class="keyword">char</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)  从指定offset索引开始 将count个字符数据转换成字符串对象 </span><br></pre></td></tr></table></figure><h2 id="1-2-常用方法"><a href="#1-2-常用方法" class="headerlink" title="1.2 常用方法"></a>1.2 常用方法</h2><h3 id="1-2-1-与数组相关"><a href="#1-2-1-与数组相关" class="headerlink" title="1.2.1 与数组相关"></a>1.2.1 与数组相关</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>byte[]</code></td><td><code>getBytes()</code></td><td>使用平台的默认字符集将此 <code>String</code> 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td><code> byte[]</code></td><td><code>getBytes(Charset charset)</code></td><td>使用给定的 <code>charset</code> 将此 <code>String</code> 编码到 byte 序列，并将结果存储到新的 byte 数组。</td></tr><tr><td><code>byte[]</code></td><td><code>getBytes(String charsetName)</code></td><td>使用指定的字符集将此 <code>String</code> 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td><code>char[]</code></td><td><code>toCharArray()</code></td><td>将此字符串转换为一个新的字符数组。</td></tr><tr><td><code>String[]</code></td><td><code>split(String regex)</code></td><td>根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td><code>String[]</code></td><td><code>split(String regex, int limit)</code></td><td>根据给定正则表达式的匹配拆分此字符串。</td></tr></tbody></table><p>编码操作示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编码  vs 解码:</span></span><br><span class="line">      <span class="comment">//编码: 看的懂的字符内容 转成 将看不懂的字节数据</span></span><br><span class="line">      <span class="comment">//将字符串转换成utf-8格式下的字节数据</span></span><br><span class="line">      <span class="keyword">byte</span>[] bytes1 = <span class="string">&quot;我们&quot;</span>.getBytes(Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">      System.out.println(Arrays.toString(bytes1));<span class="comment">//[-50, -46, -61, -57]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//解码:将看不懂的字节数据转换成看的懂的字符内容</span></span><br><span class="line">      <span class="comment">//将字节数据转换成gbk编码格式下的字符串</span></span><br><span class="line">      String s2 = <span class="keyword">new</span> String(bytes1, Charset.forName(<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">      System.out.println(s2);<span class="comment">//乱码 (编码不统一)</span></span><br></pre></td></tr></table></figure><p>拆分操作示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: split方法:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//场景1：用于操作用户信息</span></span><br><span class="line">    String userInfo = <span class="string">&quot;1001_张三_123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下划线分割数据</span></span><br><span class="line">    String[] split = userInfo.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;分割后的数据:&quot;</span> + Arrays.toString(split));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换信息</span></span><br><span class="line">    <span class="keyword">int</span> id = Integer.parseInt(split[<span class="number">0</span>]);</span><br><span class="line">    String name = split[<span class="number">1</span>];</span><br><span class="line">    String password = split[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装数据</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(id, name, password);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户信息：(姓名、id、密码)&quot;</span> + user.getName() + <span class="string">&quot; &quot;</span> + user.getId() + <span class="string">&quot; &quot;</span> + user.getPassword());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: split方法:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//场景2：解决多用户上传重名文件问题</span></span><br><span class="line">    String sourceFile = <span class="string">&quot;a.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用java.util.UUID和标识符_构成唯一标识符</span></span><br><span class="line">    String userSourceFile = UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + sourceFile;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件名： &quot;</span> + userSourceFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//经过传输来到数据处理层，通过split方法获取用户原数据</span></span><br><span class="line">    String[] split = userSourceFile.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户原文件名：&quot;</span> + split[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: split方法_3:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;abcabcabbccaaba&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String[] split(String regex, int limit):在给定正则表达式的匹配项周围拆分此字符串。将字符串拆分为limit部分</span></span><br><span class="line">    String[] str1 = str.split(<span class="string">&quot;a&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(str1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-拼接"><a href="#1-2-2-拼接" class="headerlink" title="1.2.2 拼接"></a>1.2.2 拼接</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>String</code></td><td><code>concat(String str)</code></td><td>将指定字符串与原字符串尾部进行拼接。如果参数字符串的长度为 <code>0</code>，则返回此 <code>String</code> 对象。否则，创建一个新的 <code>String</code> 对象，用来表示由此 <code>String</code> 对象表示的字符序列和参数字符串表示的字符序列连接而成的字符序列。</td></tr><tr><td><code>static String</code></td><td><code>join(CharSequence delimiter, CharSequence... elements)</code></td><td>使用特定的delimiter分隔符将多个字符串数据拼接在一起。</td></tr></tbody></table><blockquote><p>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持</p></blockquote><p>拼接操作示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: String 的 +</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String str2 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    str2 = str2 + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jvm对 + 有优化</span></span><br><span class="line">    System.out.println(str1.equals(str2));</span><br><span class="line">    System.out.println(str1 == str2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: concat方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//concat方法 :将指定字符串与原字符串尾部进行拼接(创建了新对象返回)</span></span><br><span class="line">    String str = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个&quot;abcdefg&quot;的新对象</span></span><br><span class="line">    str.concat(<span class="string">&quot;efg&quot;</span>);</span><br><span class="line">    System.out.println(str);<span class="comment">// abcd</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个&quot;abcdefg&quot;的新对象，并赋值给str</span></span><br><span class="line">    str = str.concat(<span class="string">&quot;efg&quot;</span>);</span><br><span class="line">    System.out.println(str); <span class="comment">//abcdefg</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: join方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Integer id = <span class="number">1</span>;</span><br><span class="line">    String name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通拼接:</span></span><br><span class="line">    String str1 = id + <span class="string">&quot;_&quot;</span> + name + <span class="string">&quot;_&quot;</span> + password;</span><br><span class="line">    System.out.println(str1);<span class="comment">//1_张三_123abc</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用join方法拼接</span></span><br><span class="line">    <span class="comment">//join(CharSequence delimiter, CharSequence... elements):返回一个新的String，该字符串由CharSequence elements的副本和指定的delimiter的副本组成。</span></span><br><span class="line">    String[] strings = &#123;id.toString(), name, password&#125;;</span><br><span class="line">    String str2 = String.join(<span class="string">&quot;_&quot;</span>, strings);</span><br><span class="line">    System.out.println(str2);<span class="comment">//1_张三_123abc</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-检索"><a href="#1-2-3-检索" class="headerlink" title="1.2.3 检索"></a>1.2.3 检索</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>char</code></td><td><code>charAt(int index)</code></td><td>查询指定索引的字符的数据</td></tr><tr><td><code>int</code></td><td><code>indexOf(String str)</code></td><td>查询指定字符串第一次出现的索引位置  没有找到 -1</td></tr><tr><td><code>int</code></td><td><code>indexOf(String str, int fromIndex)</code></td><td>从指定索引(包含)开始查询指定字符串第一次出现的索引位置  没有找到 -1</td></tr><tr><td><code>int</code></td><td><code>lastIndexOf(String str)</code></td><td>查询指定字符串最后一次出现的索引位置  没有找到 -1</td></tr><tr><td><code>int</code></td><td><code>lastIndexOf(String str, int fromIndex)</code></td><td>从指定索引(包含)开始查询指定字符串最后出现的索引位置  没有找到 -1</td></tr><tr><td><code>String</code></td><td><code>substring(int beginIndex)</code></td><td>从指定索引开始(包含) 截取部分字符串数据</td></tr><tr><td><code>String</code></td><td><code>substring(int beginIndex, int endIndex)</code></td><td>从指定索引开始(包含) 到结尾索引(不包含) 截取部分字符串数据</td></tr></tbody></table><p>检索操作示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: charAt方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//char charAt(int index):返回指定索引处的char值。 索引的范围是0到length() - 1</span></span><br><span class="line">    System.out.println(str.charAt(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: indexOf方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int indexOf(String str):返回指定子字符串首次出现在该字符串中的索引。如果此字符串中没有这样的字符，则返回 -1。</span></span><br><span class="line">    <span class="keyword">int</span> index1 = str.indexOf(<span class="string">&quot;o&quot;</span>);</span><br><span class="line">    System.out.println(index1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从指定的索引(包括指定索引)开始，返回指定子字符串首次出现在该字符串中的索引。如果此字符串中没有这样的字符，则返回 -1。</span></span><br><span class="line">    <span class="keyword">int</span> index2 = str.indexOf(<span class="string">&quot;o&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(index2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回最后一次出现的指定子字符串在此字符串内的索引。如果此字符串中没有这样的字符，则返回 -1。</span></span><br><span class="line">    <span class="keyword">int</span> index3 = str.lastIndexOf(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">    System.out.println(index3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索(即从索引大的向索引小的方向搜索)，如果此字符串中没有这样的字符，则返回 -1</span></span><br><span class="line">    <span class="keyword">int</span> index4 = str.lastIndexOf(<span class="string">&quot;l&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    System.out.println(index4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: subSting方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//场景1：电话加密</span></span><br><span class="line">    String phone = <span class="string">&quot;15512345678&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//截取前三个号码</span></span><br><span class="line">    String head = phone.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//截取后四个号码</span></span><br><span class="line">    String end = phone.substring(<span class="number">7</span>);</span><br><span class="line">    <span class="comment">//拼接</span></span><br><span class="line">    System.out.println(<span class="string">&quot;加密后&quot;</span> + head + <span class="string">&quot;****&quot;</span> + end);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n============我是分割符============\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//场景2：解决多用户上传重名文件问题</span></span><br><span class="line">    String sourceFile = <span class="string">&quot;myFile_Java_String.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用java.util.UUID和标识符_构成唯一标识符</span></span><br><span class="line">    String userSourceFile = UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + sourceFile;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件名： &quot;</span> + userSourceFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//经过传输来到数据处理层，通过substring方法获取用户原数据</span></span><br><span class="line">    String str = userSourceFile.substring(userSourceFile.indexOf(<span class="string">&quot;_&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户原文件名：&quot;</span> + str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-判断"><a href="#1-2-4-判断" class="headerlink" title="1.2.4 判断"></a>1.2.4 判断</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>contains(CharSequence s)</code></td><td>判断字符串是否包含指定字符串</td></tr><tr><td><code>boolean</code></td><td><code>equals(Object anObject)</code></td><td>比较内容是否相等</td></tr><tr><td><code>boolean</code></td><td><code>equalsIgnoreCase(String anotherString)</code></td><td>不区分大小写比较内容是否相等</td></tr><tr><td><code>int</code></td><td><code>compareTo(String anotherString)</code></td><td>比较Unicode值大小，返回差值</td></tr><tr><td><code>int</code></td><td><code>compareToIgnoreCase(String str)</code></td><td>不区分大小写比较Unicode值大小，返回差值</td></tr><tr><td><code>boolean</code></td><td><code>isEmpty()</code></td><td>判断字符串是否是空</td></tr><tr><td><code>boolean</code></td><td><code>matches(String regex)</code></td><td>判断字符串是否满足正则格式要求</td></tr><tr><td><code>boolean</code></td><td><code>startsWith(String prefix)</code></td><td>判断字符串是否以…开头</td></tr><tr><td><code>boolean</code></td><td><code>endsWith(String suffix)</code></td><td>判断字符串是否以…结尾</td></tr></tbody></table><p>判断操作示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: String的判断方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    String str2 = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">    <span class="comment">//执行字符串判断操作之前应判断对象是否为null</span></span><br><span class="line">    Objects.requireNonNull(str1);</span><br><span class="line">    Objects.requireNonNull(str2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.boolean isEmpty() : 当且仅当length()为0返回true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否为空:&quot;</span> + str1.isEmpty());</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. boolean contain(CharSequence s) :当且仅当此字符串包含指定的char值序列时，才返回true</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1是否包含H:&quot;</span> + str1.contains(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2是否包含H:&quot;</span> + str2.contains(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. boolean equals(Object anObject) :将此字符串与指定对象进行比较。 当且仅当参数不为null并且是一个String对象、表示与此对象相同的字符序列时，结果为true 。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1的内容是否与str2的相等：&quot;</span> + str1.equals(str2));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. boolean equalsIgnoreCase(Object anObject) :与equals作用相同是否相等(忽略大小写)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1的内容是否与str2的相等(忽略大小写)：&quot;</span> + str1.equalsIgnoreCase(str2));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. boolean compareTo(String anotherString):比较两字符串的Unicode值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1的Unicode和str2的Unicode差值：&quot;</span> +  str1.compareTo(str2));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. boolean matches(String regex) :判断此字符串是否与给定的正则表达式匹配。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1是否含有 world! :&quot;</span> + str1.matches(<span class="string">&quot;\\w+ world!&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2是否含有hello?&quot;</span> + str2.matches(<span class="string">&quot;\\w+ world!&quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. boolean startWith(String prefix) 判断是否以指定的前缀开头</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1是否以H开头&quot;</span> + str1.startsWith(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2是否以H开头&quot;</span> + str2.startsWith(<span class="string">&quot;H&quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. boolean startsWith(String prefix, ind toOffset) 判断是否以指定的前缀开头，从指定的索引开始判断</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1空格后面是否以W开头&quot;</span> + str1.startsWith(<span class="string">&quot;W&quot;</span>,str1.indexOf(<span class="string">&quot; &quot;</span>) + <span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2空格后面是否以W开头&quot;</span> + str2.startsWith(<span class="string">&quot;W&quot;</span>,str2.indexOf(<span class="string">&quot; &quot;</span>) + <span class="number">1</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. boolean endWith() 判断是否以给定的后缀结尾</span></span><br><span class="line">    System.out.println(<span class="string">&quot;str1是否以world!结尾：&quot;</span> + str1.endsWith(<span class="string">&quot;world!&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;str2是否以world!结尾：&quot;</span> + str2.endsWith(<span class="string">&quot;world!&quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-5-替换"><a href="#1-2-5-替换" class="headerlink" title="1.2.5 替换"></a>1.2.5 替换</h3><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td><code>String</code></td><td><code>replace(char oldChar, char newChar)</code></td><td>使用新字符替换原字符串里面所有的字符内容</td></tr><tr><td><code>String</code></td><td><code>replaceAll(String regex, String replacement)</code></td><td>使用新字符串替换原字符串里面满足正则格式要求的字符串数据</td></tr><tr><td><code>String</code></td><td><code>replaceFirst(String regex, String replacement)</code></td><td>使用新字符串替换原字符串里面第一次满足正则格式要求的字符串数据</td></tr></tbody></table><p>替换操作示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: replace和replaceAll方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String replace(char oldChar, char newChar):</span></span><br><span class="line">        <span class="comment">//返回一个字符串，该字符串是用newChar替换此字符串中所有出现的oldChar newChar</span></span><br><span class="line">        String replace1 = str.replace(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;replace1 = &quot;</span> + replace1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String replace(CharSequence target, CharSequence replacement):</span></span><br><span class="line">        <span class="comment">//用指定的文字替换序列替换该字符串中与文字目标序列匹配的每个子字符串</span></span><br><span class="line">        String replace2 = str.replace(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;replace2 = &quot;</span> + replace2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String replaceAll(String regex, String replacement):</span></span><br><span class="line">        <span class="comment">//用给定的替换项替换该字符串中与给定的正则表达式匹配的每个子字符串</span></span><br><span class="line">        String replace3 = str.replaceAll(<span class="string">&quot;h+&quot;</span>, <span class="string">&quot;H&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;replace3 = &quot;</span> + replace3);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>1.2.6 其他方法</p><table><thead><tr><th>返回值类型</th><th>方法名</th><th>方法介绍</th></tr></thead><tbody><tr><td>String</td><td>toLowerCase()</td><td>转小写</td></tr><tr><td>String</td><td>toUpperCase()</td><td>转大写</td></tr><tr><td>String</td><td>trim()</td><td>去除字符串左右2端的空格</td></tr><tr><td>String</td><td>valueOf(int i) / …</td><td>将其它类型的数据转换成字符串</td></tr><tr><td>int</td><td>length()</td><td>获得字符串长度</td></tr><tr><td>String</td><td>intern()</td><td>获得字符串副本</td></tr></tbody></table><p>其他方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 其他方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="comment">//1. String toUpperCase() ;String toLowerCase() 大小写转换操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;小写转大写：&quot;</span> + str.toUpperCase());</span><br><span class="line">    System.out.println(<span class="string">&quot;大写转小写：&quot;</span> + str.toLowerCase());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.  String trim() 去除两端的空格</span></span><br><span class="line">    String str1 = <span class="string">&quot;         abc &quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;去除两端空格：&quot;</span> + str1.trim());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. int length() 获得字符串长度</span></span><br><span class="line">    System.out.println(<span class="string">&quot;字符串长度：&quot;</span> + str.length());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. intern()：获得字符串副本</span></span><br><span class="line">    System.out.println(<span class="string">&quot;字符串副本：&quot;</span> + str.intern());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//练习String比较</span></span><br><span class="line">    String str4 = <span class="string">&quot;1234&quot;</span>;<span class="comment">//常量池</span></span><br><span class="line">    String str5 = <span class="keyword">new</span> String(<span class="string">&quot;1234&quot;</span>);<span class="comment">//堆</span></span><br><span class="line">    String str6 = <span class="string">&quot;12&quot;</span> + <span class="string">&quot;34&quot;</span>;<span class="comment">//常量池</span></span><br><span class="line">    String str7 = <span class="string">&quot;12&quot;</span>; str7 += <span class="string">&quot;34&quot;</span>;<span class="comment">//堆</span></span><br><span class="line">    String str8 = str5.intern();<span class="comment">//常量池</span></span><br><span class="line"></span><br><span class="line">    System.out.println(str4 == str5);<span class="comment">//false</span></span><br><span class="line">    System.out.println(str4 == str6);<span class="comment">//true</span></span><br><span class="line">    System.out.println(str4 == str7);<span class="comment">//false</span></span><br><span class="line">    System.out.println(str4 == str8);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-6-与正则相关的方法"><a href="#1-2-6-与正则相关的方法" class="headerlink" title="1.2.6 与正则相关的方法"></a>1.2.6 与正则相关的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//boolean matches(String regex)  </span></span><br><span class="line">String[] split(String regex)  </span><br><span class="line"><span class="comment">//String replaceAll(String regex, String replacement)  </span></span><br><span class="line"><span class="function">String <span class="title">replaceFirst</span><span class="params">(String regex, String replacement)</span>  </span></span><br></pre></td></tr></table></figure><blockquote><p>正则概念: 其实就是一个字符串。由一些特殊的字符或者是符号  结合特定的语句 组成字符串。 </p></blockquote><blockquote><p>一般用来==校验，匹配 替换==适合正则格式需求的字符串内容。</p></blockquote><blockquote><p>语法:  String regex = “^([字符/符号]{限定})([]{})([]{})$”;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[^]: 正则以***开头</span><br><span class="line">[$]: 正则以***结尾</span><br><span class="line">[]: 限定正则里面组成的字符内容(通配字符内容) [a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">5</span>,<span class="number">9</span>&#125;  [a-zA-Z\\d]</span><br><span class="line">&#123;&#125;: 限定字符内容出现的次数  &#123;<span class="number">2</span>&#125; &#123;<span class="number">3</span>,<span class="number">5</span>&#125; &#123;<span class="number">1</span>,&#125;</span><br><span class="line">(): 域段/组  \n表示第几个域段的内容  \<span class="number">1</span> 第一个域段的内容   $n 动态获得域段的内容(替换)</span><br><span class="line">\: 转义</span><br><span class="line">*:匹配前面的子表达式零次或多次</span><br><span class="line">+:匹配前面的子表达式<span class="number">1</span>次或多次</span><br><span class="line">.:通配任意一个字符。    \\.</span><br><span class="line">\d:[<span class="number">0</span>-<span class="number">9</span>]    </span><br><span class="line">\w: [A-Za-z0-9_]</span><br><span class="line">\s: 空白字符    </span><br></pre></td></tr></table></figure><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式手册</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//校验用户名/密码</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用户名规则: 首字母必须大写  数字或者小写字母 3-5  特殊符号_- 1 数字1-3</span></span><br><span class="line">        String username = <span class="string">&quot;Jim123-123&quot;</span>;</span><br><span class="line">        String regex = <span class="string">&quot;^([A-Z]&#123;1&#125;)([0-9a-z]&#123;3,5&#125;)([_-]&#123;1&#125;)([\\d]&#123;1,3&#125;)$&quot;</span>;</span><br><span class="line">        regex = <span class="string">&quot;^[A-Z][\\da-z]&#123;3,5&#125;[_-]\\d&#123;1,3&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* //1.校验正则语言是否ok</span></span><br><span class="line"><span class="comment">        Pattern pattern = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">        //2.创建匹配器</span></span><br><span class="line"><span class="comment">        Matcher matcher = pattern.matcher(username);</span></span><br><span class="line"><span class="comment">        //3.校验</span></span><br><span class="line"><span class="comment">        System.out.println(matcher.matches());*/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(username.matches(regex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加密手机号</span></span><br><span class="line">         </span><br><span class="line">        String phone = <span class="string">&quot;1318011256&quot;</span>;</span><br><span class="line">        <span class="comment">//只是替换中间4个字符为****</span></span><br><span class="line">        String regex = <span class="string">&quot;^(\\d&#123;3&#125;)(\\d&#123;4&#125;)(\\d&#123;4&#125;)$&quot;</span>;</span><br><span class="line">        System.out.println(phone.replaceAll(regex, <span class="string">&quot;$1****$3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//去重重复的字符内容</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">        String str = <span class="string">&quot;我16111avaaab1ccc我&quot;</span>;</span><br><span class="line">        <span class="comment">//将出现&gt;=1次字符使用自己替换</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        String newStr = <span class="keyword">new</span> String(chars);</span><br><span class="line"><span class="comment">//        System.out.println(newStr);//111116aaaabcccv我我  16abcv我</span></span><br><span class="line"></span><br><span class="line">        String regex = <span class="string">&quot;^([.]+)$&quot;</span>;</span><br><span class="line">        regex = <span class="string">&quot;(.)\\1+&quot;</span>;</span><br><span class="line">        System.out.println(newStr.replaceAll(regex, <span class="string">&quot;$1&quot;</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.println(end - begin);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> begin = System.nanoTime();</span><br><span class="line">        <span class="comment">//去重重复的字符内容</span></span><br><span class="line">        String str = <span class="string">&quot;16111avaaab1ccc&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> length = str.length();<span class="comment">//字符串长度</span></span><br><span class="line"></span><br><span class="line">        String[] newString = <span class="keyword">new</span> String[str.length()];<span class="comment">//存储(非重复)唯一的元素</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; length; index++) &#123;<span class="comment">//遍历字符串</span></span><br><span class="line">            Character c = str.charAt(index);<span class="comment">//获得指定索引字符内容</span></span><br><span class="line">            <span class="comment">//判断之前是否在newString数组中是否存储过c</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (String s : newString) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(c.toString(), s)) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                newString[i] = c.toString();</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] copyOf = Arrays.copyOf(newString, i);</span><br><span class="line">        String str1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s : copyOf) &#123;</span><br><span class="line">            str1 = str1 + s;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(str1);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.println(end - begin);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-底层原理"><a href="#1-3-底层原理" class="headerlink" title="1.3 底层原理"></a>1.3 底层原理</h2><h1 id="2-字符串变量类——StringBuffer、Stringbuilder"><a href="#2-字符串变量类——StringBuffer、Stringbuilder" class="headerlink" title="2. 字符串变量类——StringBuffer、Stringbuilder"></a>2. 字符串变量类——<code>StringBuffer</code>、<code>Stringbuilder</code></h1><blockquote><p><code>StringBuffer</code>是<strong>线程安全的可变字符序列</strong>。一个类似于 <code>String</code> 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。</p><p>可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</p></blockquote><blockquote><p><code>StringBuilder</code>是一个可变的字符序列。<strong>此类提供一个与 <code>StringBuffer</code> 兼容的 <code>API</code>**，</strong>但不保证同步**。该类被设计用作 <code>StringBuffer</code> 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 <code>StringBuffer</code> 要快。</p></blockquote><p><code>StringBuffer</code>和<code>StringBuilder</code>类似都位于 <code>java</code>.<code>lang</code> 包下，实现了 <code>Serializable</code>  ,   <code>Appendable</code> , <code>CharSequence</code>接口</p><h2 id="2-1-String、StringBuilder、StringBuffer-对比"><a href="#2-1-String、StringBuilder、StringBuffer-对比" class="headerlink" title="2.1 String、StringBuilder、StringBuffer 对比"></a>2.1 <code>String</code>、<code>StringBuilder</code>、<code>StringBuffer </code>对比</h2><table><thead><tr><th></th><th>线程安全</th><th>效率</th><th>内存</th><th>值是否可变</th></tr></thead><tbody><tr><td>==<code>String</code>==</td><td>安全</td><td>其次</td><td>占用很多内存</td><td>不可变</td></tr><tr><td><code>StringBuffer</code></td><td>安全</td><td>最慢(同步)</td><td>只有一个对象</td><td>可变</td></tr><tr><td><code>==StringBuilder==</code></td><td>不安全</td><td>最快</td><td>只有一个对象</td><td>可变</td></tr></tbody></table><h2 id="2-2-常用构造方法"><a href="#2-2-常用构造方法" class="headerlink" title="2.2 常用构造方法"></a>2.2 常用构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer()  构造一个没有字符的字符串缓冲区，初始容量为<span class="number">16</span>个字符。(数组)</span><br><span class="line">StringBuffer(String str) </span><br></pre></td></tr></table></figure><h2 id="2-3-常用方法"><a href="#2-3-常用方法" class="headerlink" title="2.3 常用方法"></a>2.3 常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(String str)</span>  将指定的字符串拼接原字符末尾</span></span><br><span class="line"><span class="function">StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span></span><br><span class="line"><span class="function">StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span>  </span></span><br><span class="line"><span class="function">StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str </span></span></span><br><span class="line"><span class="function"><span class="params">StringBuffer reverse(）</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">void</span> setCharAt(<span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span>   </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇主要介绍了字符串类&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;StringBuilder&lt;/code&gt;、&lt;code&gt;StringBuffer&lt;/code&gt;的构造方法、常用的&lt;code&gt;API&lt;/code&gt;、以及部分底层原理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JAVA SE" scheme="http://example.com/tags/JAVA-SE/"/>
    
    <category term="常用类" scheme="http://example.com/tags/%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>【算法】冒泡排序</title>
    <link href="http://example.com/2021/01/14/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/01/14/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</id>
    <published>2021-01-13T16:23:32.000Z</published>
    <updated>2021-01-25T00:56:43.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>时间复杂度O(N^2^)，额外空间复杂度O(1)，实现可做到稳定性</p><a id="more"></a><hr><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort_BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    冒泡排序</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组为空或者数组只有一个数，不用排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        外循环控制排序的范围0~end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        end为终止元素，代表参与本轮排序最后一个元素的索引。每一轮排序，都将参与本轮排序的元素里，最大的那个元素放置在end位置上。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        从该数组最后一个元素开始（end = arr.length），每完成一次排序，end的位置向前移动1（end--），直到end到达第一个元素，结束排序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> end = arr.length - <span class="number">1</span>; end &gt; <span class="number">0</span>; end--) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            内循环负责将每轮排序中最大的数排到end的位置上。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            i代表每轮排序的起始元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            每轮排序中，第一次都以数组中第一个元素为起始元素(i = 0)。在本轮的每一次排序中，将本次的起始元素和起始元素后面的一个元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            进行比大小，如果起始元素比它后面一个元素大（ if(arr[i] &gt; arr[i + 1]) ）,则把起始元素放后面，即两元素进行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            交换（swap(arr , arr[i] , arr[i + 1])）。否则，不进行任何操作。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            在结束本次排序后，如果代表起始元素索引的变量i未到达终止元素前一个位置（ i &lt; end ）,则继续进行下一次排序，直到</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             i = end - 1时，结束本轮排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            但无论本次排序中，起始元素arr[i]及其后面的元素arr[i + 1]谁大谁小，都将i往后移动1（i++），即下一次排序的起始元素为本次</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             后面的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">                    swap(arr, i, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    交换数组中，索引i和索引j上的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line"></span><br><span class="line">        arr[j] = arr[i] ^ arr[j];</span><br><span class="line"></span><br><span class="line">        arr[i] = arr[i] ^ arr[j];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;输入数组长度：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个元素:&quot;</span>);</span><br><span class="line"></span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bubbleSort(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;n排序后:&quot;</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组对数器"><a href="#数组对数器" class="headerlink" title="数组对数器"></a>数组对数器</h1><p>时间复杂度高的算法往往比较简单，而时间复杂度低的算法往往需要添加很多操作，这就会使得算法逻辑容易出错。</p><p>使用对数器的技巧，能快速检验出该算法的对错。</p><p>对数器的原理便是生成随机数组产生一个随机样本，通过与时间复杂度高但实现简单不易出错的算法进行比较，若是比较几千几万次没出错，则可说明逻辑正确。否则打印出出错的样本，以便查看出错流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> value, <span class="keyword">int</span> testTimes)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> succeed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; testTimes; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成长度在[0,size]的随机数组</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] arr1 = getRandomArray(size, value); <span class="comment">//随机数组</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] arr2 = copyArray(arr1);  <span class="comment">//随机数组副本</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] arr3 = copyArray(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//不易出错的算法</span></span><br><span class="line"></span><br><span class="line">            Arrays.sort(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//测试的算法</span></span><br><span class="line"></span><br><span class="line">            Sort_BubbleSort.bubbleSort(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isEquals(arr1, arr2))&#123;</span><br><span class="line"></span><br><span class="line">                succeed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                printArray(arr3);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(succeed ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(a + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEquals</span><span class="params">(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.判断是否为空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((arr1 == <span class="keyword">null</span> &amp;&amp; arr2 != <span class="keyword">null</span>) || (arr1 != <span class="keyword">null</span> &amp;&amp; arr2 ==<span class="keyword">null</span>))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr1 == <span class="keyword">null</span> &amp;&amp; arr2 == <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 都不为空，判断长度是否相等</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr1.length != arr2.length)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. 长度相等，判断元素是否相等</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arr1[i] != arr2[i])&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4. 都相等则返回true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copyArray(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] copyArr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            copyArr[i] = arr[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> copyArr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getRandomArray(<span class="keyword">int</span> size, <span class="keyword">int</span> value) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">int</span>)((size + <span class="number">1</span>)  Math.random())];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            arr[i] = (<span class="keyword">int</span>)((value + <span class="number">1</span>)  Math.random()) - (<span class="keyword">int</span>)((value + <span class="number">1</span>)  Math.random());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;时间复杂度O(N^2^)，额外空间复杂度O(1)，实现可做到稳定性&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【JAVA SE】一、基本概念与常识</title>
    <link href="http://example.com/2021/01/13/%E3%80%90JAVA-SE%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/"/>
    <id>http://example.com/2021/01/13/%E3%80%90JAVA-SE%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/</id>
    <published>2021-01-12T16:02:07.000Z</published>
    <updated>2021-01-25T01:31:43.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>java基础总结</p><a id="more"></a><h1 id="1-Java入门"><a href="#1-Java入门" class="headerlink" title="1. Java入门"></a><strong>1. Java入门</strong></h1><h2 id="1-1-java语言特点"><a href="#1-1-java语言特点" class="headerlink" title="1.1 java语言特点"></a><strong>1.1 java语言特点</strong></h2><ul><li>简单易学</li><li><strong>面向对象(封装、继承、多态)</strong></li><li><strong>平台无关性( JVM 实现跨平台)</strong></li><li>可靠性</li><li>安全性</li><li><strong>支持多线程(内置多线程支持)</strong></li><li>支持网络编程且方便</li><li><strong>编译与解释并存</strong></li></ul><h2 id="1-2-JVM-JRE-JDK-介绍及区别"><a href="#1-2-JVM-JRE-JDK-介绍及区别" class="headerlink" title="1.2 JVM, JRE, JDK 介绍及区别"></a><strong>1.2 JVM, JRE, JDK 介绍及区别</strong></h2><p><strong>JDK ( Java Development Kit )</strong> : java 开发工具包，提供 java 的开发环境和运行环境。</p><blockquote><p>在jdk文件夹中，jdk/jre/<strong>bin</strong>可以认为该目录即为jvm</p></blockquote><p><strong>JRE ( Java Runtime Environment ) :</strong> java 运行环境，提供 java 的运行环境。</p><blockquote><p>jre即由bin+lib组成，也就是说jre包含了jvm以及执行class文件所需要的类库lib。</p></blockquote><p><strong>JVM (Java Virtual Machine)</strong> : java虚拟机，将字节码文件翻译成对应平台的机器码。</p><p>在jdk目录下面有六个文件夹、一个src类库源码压缩包、和其他几个声明文件。真正在运行java时起作用的是以下四个文件夹：</p><p>bin : 最主要的是编译器(javac.exe)  </p><pre><code>   include : java和JVM交互用的头文件    </code></pre><p>​     lib：类库         jre : java运行环境</p><p>总的来说jdk包括开发工具和jre，jre包括核心类库和jvm</p><h2 id="1-3-java跨平台性"><a href="#1-3-java跨平台性" class="headerlink" title="1.3 java跨平台性"></a><strong>1.3 java跨平台性</strong></h2><p>jvm是java跨平台的核心，jvm能将字节码文件解释成机器码实现操作系统的API调用，而不同平台有对应版本的jvm。java源程序编译成字节码后，即可在不同平台的jvm下解释、调用操作系统API，实现“一次编译，到处运行”。</p><blockquote><p>Java 能够跨平台运行的核心在于 JVM 。不是 Java 能够跨平台，而是它的 jvm 能够跨平台。我们知道，不同的操作系统向上的 API 肯定是不同的，那么如果我们想要写一段代码调用系统的声音设备，就需要针对不同系统的 API 写出不同的代码来完成动作。</p><p>而 Java 引入了字节码的概念，jvm 只能认识字节码，并将它们解释到系统的 API 调用。针对不同的系统有不同的 jvm 实现，有 Linux 版本的 jvm 实现，也有 Windows 版本的 jvm 实现，但是同一段代码在编译后的字节码是一样的。引用上面的例子，在 Java API 层面，我们调用系统声音设备的代码是唯一的，和系统无关，编译生成的字节码也是唯一的。但是同一段字节码，在不同的 jvm 实现上会映射到不同系统的 API 调用，从而实现代码的不加修改即可跨平台运行。</p></blockquote><h2 id="1-4-“编译与解释并存”？"><a href="#1-4-“编译与解释并存”？" class="headerlink" title="1.4 “编译与解释并存”？"></a><strong>1.4 “编译与解释并存”？</strong></h2><img src="/2021/01/13/%E3%80%90JAVA-SE%E3%80%91%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B8%B8%E8%AF%86/7a716af0952.webp" class="" title="img"><p>重点讲.class-&gt;机器码 这一步。在这一步 jvm 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的，也就是所谓的热点代码，所以后面引进了 JIT 编译器，JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><h1 id="2-java语法"><a href="#2-java语法" class="headerlink" title="2. java语法"></a><strong>2. java语法</strong></h1><h2 id="2-1-continue、break、和-return-的区别是什么？"><a href="#2-1-continue、break、和-return-的区别是什么？" class="headerlink" title="2.1 continue、break、和 return 的区别是什么？"></a><strong>2.1 continue、break、和 return 的区别是什么？</strong></h2><ol><li>continue ：指<strong>跳过</strong>当前的这一次循环，继续下一次循环。</li><li>break ：指<strong>跳出</strong>整个循环体，继续执行循环下面的语句。</li><li>return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：</li></ol><ul><li><ol><li>return; ：直接使用 return 结束方法执行，用于<strong>没有返回值函数的方法</strong></li><li>return value; ：return 一个特定值，用于<strong>有返回值函数的方法</strong></li></ol></li></ul><h2 id="2-2-和-equals-的区别"><a href="#2-2-和-equals-的区别" class="headerlink" title="2.2  ==和 equals 的区别"></a><strong>2.2  ==和 equals 的区别</strong></h2><ol><li>== : 它的作用是<strong>判断两个对象的地址</strong>是不是相等。即：判断两个对象是不是同一个对象。(<strong>基本数据类型**</strong>比较的是值**<strong>，引用数据类型**</strong>比较的是内存地址**)</li></ol><p>因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。</p><ol><li><strong>equals()</strong> : 它的作用也是判断两个对象是否相等，它<strong>不能用于比较基本数据类型的变量</strong>。equals() 方法存在两种使用情况：</li></ol><ul><li><ul><li>情况 1：类<strong>没有重写（覆盖）</strong> equals()方法。则通过equals()比较该类的两个对象时，<strong>等价于“==”</strong>比较这两个对象。使用的默认是 Object类equals()方法。</li></ul></li><li><ul><li>情况 2：类<strong>重写（覆盖）</strong>了 equals()方法。一般，我们都覆盖 equals()方法来两个对象的内容相等；若它们的内容相等，则返回 true(即，认为这两个对象相等)。</li></ul></li></ul><p>equals()方法存在于Object类中，而Object类是所有类的直接或间接父类。</p><p>注：</p><ul><li>String 中的 equals 方法是被重写过的，因为 Object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h2 id="2-3-amp-和-amp-amp-和"><a href="#2-3-amp-和-amp-amp-和" class="headerlink" title="2.3 &amp;和&amp;&amp;(|和||)"></a><strong>2.3 &amp;和&amp;&amp;(|和||)</strong></h2><ul><li><p>&amp;运算符有两种用法：**(1)按位与；(2)逻辑与**。</p></li><li><p>&amp;&amp;运算符是<strong>短路与</strong>运算。</p></li></ul><p>逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true，整个表达式的值才是true。</p><p>&amp;&amp;之所以称为短路运算，是因为如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。</p><p>很多时候我们可能都需要用&amp;&amp;而不是&amp;，例如在验证用户登录时判定用户名不是null而且不是空字符串，应当写为：username != null &amp;&amp;!username.equals(“”)，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的equals比较，否则会产生NullPointerException异常。</p><h1 id="3-java数据类型"><a href="#3-java数据类型" class="headerlink" title="3. java数据类型"></a><strong>3. java数据类型</strong></h1><h2 id="3-1-Java-中的基本数据类型种类、对应的包装类型、占用多少字节"><a href="#3-1-Java-中的基本数据类型种类、对应的包装类型、占用多少字节" class="headerlink" title="3.1 Java 中的基本数据类型种类、对应的包装类型、占用多少字节"></a><strong>3.1 Java 中的基本数据类型种类、对应的包装类型、占用多少字节</strong></h2><p>Java中有 <strong>8 种基本数据类型</strong>，分别为：</p><ul><li>6 种数字类型 ：byte、short、int、long、float、double</li><li>1 种字符类型：char</li><li>1 种布尔型：boolean。</li></ul><p>这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>int (默认整型)</td><td>32</td><td>4</td><td>0</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>char</td><td>16</td><td>2</td><td>‘u0000’</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double (默认浮点型)</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><p>对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p><p>注意：</p><ol><li>Java 里使用 long 类型的数据一定要在数值后面加上 <strong>L</strong>，否则将作为整型解析：</li><li>Java 里使用 float类型的数据一定要在数值后面加上 <strong>F</strong>，否则将作为双浮点·型解析：</li><li>char a = ‘h’char :单引号，String a = “hello” :双引号</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;java基础总结&lt;/p&gt;</summary>
    
    
    
    
    <category term="JAVA SE" scheme="http://example.com/tags/JAVA-SE/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo+GitHub搭建个人博客】三、主题优化</title>
    <link href="http://example.com/2020/12/31/Hexo3/"/>
    <id>http://example.com/2020/12/31/Hexo3/</id>
    <published>2020-12-31T05:30:06.000Z</published>
    <updated>2021-01-25T00:56:43.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前两篇分别介绍了如何搭建一个Hexo框架即如何利用其来进行写作，本篇主要针对Next主题对博客进行各项优化。</p><p>看板娘</p><p><a href="https://www.zh66.club/2019/09/08/hexo-helper-live2d/">https://www.zh66.club/2019/09/08/hexo-helper-live2d/</a></p><p><a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p><p><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a></p><p><a href="http://yearito.cn/posts/hexo-writing-skills.html#%E6%8F%92%E5%85%A5Swig%E4%BB%A3%E7%A0%81">http://yearito.cn/posts/hexo-writing-skills.html#%E6%8F%92%E5%85%A5Swig%E4%BB%A3%E7%A0%81</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前两篇分别介绍了如何搭建一个Hexo框架即如何利用其来进行写作，本篇主要针对Next主题对博客进行各项优化。&lt;/p&gt;
&lt;p&gt;看板娘&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【Hexo+GitHub搭建个人博客】二、框架使用及技巧</title>
    <link href="http://example.com/2020/12/31/Hexo2/"/>
    <id>http://example.com/2020/12/31/Hexo2/</id>
    <published>2020-12-31T04:48:42.000Z</published>
    <updated>2021-01-25T01:18:20.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　在框架建立起来后，则接下来便是要学会如何使用，其中包括Hexo的命令包括初始化文件夹、新建博文、发布博文、启动本地服务器等等。同时学习如何使用一些小技巧，</p><a id="more"></a><h1 id="Hexo文件结构"><a href="#Hexo文件结构" class="headerlink" title="Hexo文件结构"></a>Hexo文件结构</h1><p>　　在介绍命令前，先了解一下目录下的主要文件夹:</p><ul><li><code>_config.yml</code> :  博客配置文件，配置了<strong>博客的各项设置</strong></li><li><code>source</code> : 资源文件夹，里面有所有的<strong>博文或是独立页面</strong>，存放着文章、草稿等资源</li><li><code>themes</code> : 主题文件夹，包含了一个或多个<strong>主题</strong>，Hexo 会根据主题来生成静态页面</li><li><code>scaffolds</code>  : 模板文件夹，当新建文章时，Hexo会根据模板文件夹里的<strong>模板</strong>来建立文件。</li></ul><h1 id="Hexo基础命令"><a href="#Hexo基础命令" class="headerlink" title="Hexo基础命令"></a>Hexo基础命令</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init<span class="meta"> [博客文件夹名]</span></span><br></pre></td></tr></table></figure><p>　　<strong>新建一个博客网站</strong>，如果没有指定文件夹，就在当前目录创建默认文件夹</p><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> [layout] [Option] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><p>　　<strong>创建一篇博文</strong>:</p><p>　　<code>layout</code>是可选项，用来设置布局(layout)参数。常见布局的有 <code>post</code>（文章) 、<code>page</code>(页面) 、<code>draft</code> (草稿)三种，如果不填写，默认将会选择 <code>post</code>。</p><p>　　<code>title</code> 则是<strong>必选项</strong>，会做为文件名称，同时生成的文件就是 <code>&lt;title&gt;.md</code> 。例如，下面会生成一个标题为 <code>新的博客</code> 的 <code>新的博客.md</code> 文件</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;新的博客&quot;</span></span><br></pre></td></tr></table></figure><p>　　但是有时候我们创建一篇博文，它的标题和文件名不一定是相同的，这时候就要用到 <code>Option</code> 参数了。</p><p>　　<code>Option</code>是可选项，默认情况下，Hexo会使用文章的标题来决定文章文件的路径。可以使用 <code>-p</code> 或<code>--path</code> 参数来<strong>自行决定文件</strong>的文件名和标题：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> --path about/test <span class="string">&quot;新的标题&quot;</span>  </span><br></pre></td></tr></table></figure><p>　　上述命令将在 <code>source/about/</code> 创建文件名为 <code>test.md</code> ，标题为 <code>新的标题</code> 文件。</p><table><thead><tr><th>参数Option</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r</code>, <code>--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s</code>, <code>--slug</code></td><td>自定义帖子的URL</td></tr></tbody></table><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish  <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　发布命令，会将<code>/source/_drafts</code>目录下的草稿发布出去。如果创建了一个草稿，想要发布出去，则需要用到此命令。<code>&lt;filename&gt;</code> 则是草稿的文件名，注意<strong>不包括后缀名</strong>。</p><p>　　 </p><h2 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>　　启动服务器，将你的博客暂时可以<strong>从本地直接访问</strong>，方便查看效果。默认情况下，访问网址为： <code>http://localhost:4000/</code>，按 <code>Ctrl + c</code> 停止.</p><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br></pre></td></tr></table></figure><p>　　<strong>清除</strong>缓存文件和已生成的静态文件。在某些情况，如对站点的更改<strong>无论如何也不生效</strong>，可能需要运行该命令</p><p>　　<code>hexo generate</code> 与 <code>hexo deploy</code> 这两个命令和部署有关，会在具体讲如何部署上线时展开讲解。</p><h1 id="博文相关"><a href="#博文相关" class="headerlink" title="博文相关"></a>博文相关</h1><p>　　明白了如何使用 <code>Hexo</code> 生成想要的文件以及如何预览之后,就可以开始进行博文的撰写了。在 <code>source</code> 目录下，可以找到所有生成的文章，可以使用任何喜欢的文本编辑器进行编辑。Hexo 的博文使用的是 markdown 来撰写的，当然也可以插入一些 HTML 代码来进行自定义。这一部分主要是关于文章帖子(post)。</p><h2 id="语法：Markdown"><a href="#语法：Markdown" class="headerlink" title="语法：Markdown"></a>语法：Markdown</h2><p>　　Markdown 是一种标记语言，语法简单，易阅读易编写，可以让用户完全脱离鼠标写出样式丰富的文档。其语法可以自行去学习<a href="https://www.markdownguide.org/basic-syntax">基础语法</a>和<a href="https://www.markdownguide.org/extended-syntax">扩展语法</a>，这里仅介绍几个。</p><h3 id="代码块进阶用法"><a href="#代码块进阶用法" class="headerlink" title="代码块进阶用法"></a>代码块进阶用法</h3><p>　　可以通过为代码块附加参数的形式为其添加更丰富的信息提示，效果如下：</p><figure class="highlight java"><figcaption><span>java</span><a href="https://www.baidu.com/">百度</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure><p>　　用法规则：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">``` [language] [title] [url] [link text]</span></span><br><span class="line"><span class="code">code snippet</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure><p>　　其中，各参数意义如下：</p><ul><li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li><li>title：代码块标题，将会显示在左上角</li><li>url：链接地址，如果没有指定 link text 则会在右上角显示 link</li><li>link text：链接名称，指定 url 后有效，将会显示在右上角</li></ul><p>　　url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以 url 为分界，左侧除了第一个单词会被解析为 language，其他所有单词都会被解析为 title，而右侧的所有单词都会被解析为 link text。</p><p>　　如果不想填写 title，可以在 language 和 url 之间添加至少三个空格。</p><h2 id="技巧：内置标签"><a href="#技巧：内置标签" class="headerlink" title="技巧：内置标签"></a>技巧：内置标签</h2><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Hexo 每一篇生成的文章开头都会有一段由两行 「—」包裹起来的内容，称为 <strong>Front-matter</strong>，这是配置文章信息的部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">--- </span></span><br><span class="line"></span><br><span class="line"><span class="attr">title:</span> <span class="string">draft</span></span><br><span class="line"></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-12-31 23:25:36</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>　　<code>title</code> 指的是博文的标题，默认生成的标题与使用 <code>hexo new</code> 命令中输入的 <code>&lt;title&gt;</code> 相同，但是可以自行更改。</p><p>　　<code>date</code> 指的是文件被发布的时间，如果是直接生成的时间，那就与生成时间相同，如果是由 draft 通过 <code>hexo publish</code> 命令发布的，那就与 <code>publish</code> 的时间相同。</p><p>　　<code>tags</code> 指的是文章的标签，可以打上多个，如下所示：　　</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tags:</span></span><br><span class="line"></span><br><span class="line">    - tag1</span><br><span class="line"></span><br><span class="line">    - tag2</span><br><span class="line"></span><br><span class="line">    - tag3</span><br></pre></td></tr></table></figure><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>　　每一篇生成的博文应该都会出现在 <code>Hexo</code> 的主页上。如果不使用摘要，那么每一篇文章都会<strong>全文显示</strong>在主页上，这是很不美观，也很浪费资源的一种方式。</p><p>　　如果使用摘要，那么主页上只会显示一小段内容，不仅吸引了读者，还能使得整个博客网站更加优雅。摘要必须写在文章开头，紧接着文件头部。</p><p>　　当摘要写作完成后，另起一行输入 <code>&lt;!-- more --&gt;</code> 即可，这样上面的内容就能被识别，并显示在主页上。不过，这段摘要同样也会在博文页面中被显示出来，需要注意。</p><p>　　效果如下：</p><img src="/2020/12/31/Hexo2/image-20201231134523022.png" class="" title="image-20201231134523022"><h3 id="添加emoji表情"><a href="#添加emoji表情" class="headerlink" title="添加emoji表情"></a>添加emoji表情</h3><p>　　直接去❤️<a href="https://emojipedia.org/">这里</a>复制想要的表情即可</p><h3 id="高亮代码块"><a href="#高亮代码块" class="headerlink" title="高亮代码块"></a>高亮代码块</h3><p>　　设置 <code>highlight.enable: true</code> 和 <code>highlight.auto_detect: true</code></p><p>　　如果将语言设置成 <code>diff</code> 可在代码前面添加 <code>+</code> 、<code>-</code> 号高亮代码，能比较好的反映代码的增删。</p><figure class="highlight diff"><figcaption><span>/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line"><span class="deletion">- wrap: true</span></span><br><span class="line"><span class="addition">+ wrap: true</span></span><br></pre></td></tr></table></figure><div class="note info"><p>更多高亮设置可参考<a href="https://www.ofind.cn/blog/HEXO/HEXO%E4%B8%8B%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E6%8B%93%E5%B1%95%E4%BF%AE%E6%94%B9.html#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E6%A0%87%E8%AE%B0">这篇博文</a></p></div><h3 id="note-笔记标签"><a href="#note-笔记标签" class="headerlink" title="note 笔记标签"></a>note 笔记标签</h3><p>　　通过 note 标签可以为段落添加背景色，效果如上，语法如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">note</span> class %&#125;</span></span><br><span class="line"><span class="xml">文本内容 (支持行内标签)</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span></span><br></pre></td></tr></table></figure><p>　　支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定 class。</p><h3 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h3><p>通过 label 标签可以为文字添加背景色，语法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label [<span class="class"><span class="keyword">class</span>]<span class="meta">@text</span>  %&#125;</span></span><br></pre></td></tr></table></figure><p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，默认使用 <code>default</code> 作为缺省。</p><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I heard the echo, &#123;% label default@from the valleys and the heart %&#125;</span><br><span class="line">Open to the lonely soul of &#123;% label info@sickle harvesting %&#125;</span><br><span class="line">Repeat outrightly, but also repeat the well-being of</span><br><span class="line">Eventually &#123;% label warning@swaying in the desert oasis %&#125;</span><br><span class="line">&#123;% label success@I believe %&#125; I am</span><br><span class="line">&#123;% label primary@Born as the bright summer flowers %&#125;</span><br><span class="line">Do not withered undefeated fiery demon rule</span><br><span class="line">Heart rate and breathing to bear &#123;% label danger@the load of the cumbersome %&#125;</span><br><span class="line">Bored</span><br></pre></td></tr></table></figure><blockquote><p>I heard the echo, <mark class="label default">from the valleys and the heart</mark><br>Open to the lonely soul of <mark class="label info">sickle harvesting</mark><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <mark class="label warning">swaying in the desert oasis</mark></p><mark class="label success">I believe</mark> I am<mark class="label primary">Born as the bright summer flowers</mark><p>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <mark class="label danger">the load of the cumbersome</mark><br>Bored</p></blockquote><h3 id="button-按钮"><a href="#button-按钮" class="headerlink" title="button 按钮"></a>button 按钮</h3><p>通过 button 标签可以快速添加带有主题样式的按钮，语法如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% button <span class="regexp">/path/</span>to<span class="regexp">/url/</span>, text, icon [<span class="keyword">class</span>], title %&#125;</span><br></pre></td></tr></table></figure><p>也可简写为：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn <span class="regexp">/path/</span>to<span class="regexp">/url/</span>, text, icon [<span class="keyword">class</span>], title %&#125;</span><br></pre></td></tr></table></figure><p>其中， 图标 ID 来源于 <a href="https://fontawesome.com/v4.7.0/icons/">FontAwesome</a> 。</p><p>使用示例如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 标题,, 标题 %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 图标, home %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">btn</span> #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span></span><br></pre></td></tr></table></figure><a class="btn" href="#">文本</a><a class="btn" href="#" title="标题">文本 & 标题</a><a class="btn" href="#"><i class="fa fa-home"></i>文本 & 图标</a><a class="btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>文本 & 大图标 (固定宽度)</a><h3 id="tab-标签"><a href="#tab-标签" class="headerlink" title="tab 标签"></a>tab 标签</h3><p>tab 标签用于快速创建 tab 选项卡，语法如下</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> [Unique name], [index] %&#125;</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span></span><br><span class="line"><span class="xml">  标签页内容（支持行内标签）</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>Unique name: 全局唯一的 Tab 名称，将作为各个标签页的 id 属性前缀</li><li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为 - 1 则默认隐藏所有标签页</li><li>Tab caption: 当前标签页的标题，如果不指定则会以 Unique name 加上索引作为标题</li><li>icon: 在标签页标题中添加 Font awesome 图标</li></ul><p>使用示例如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> Tab标签列表 %&#125;</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- tab 标签页1 --&gt;</span></span></span><br><span class="line"><span class="xml">    标签页1文本内容</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- tab 标签页2 --&gt;</span></span></span><br><span class="line"><span class="xml">    标签页2文本内容</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- tab 标签页3 --&gt;</span></span></span><br><span class="line"><span class="xml">    标签页3文本内容</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br></pre></td></tr></table></figure><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">标签页1</a></li><li class="tab"><a href="#tab标签列表-2">标签页2</a></li><li class="tab"><a href="#tab标签列表-3">标签页3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  标签页1文本内容</p></div><div class="tab-pane" id="tab标签列表-2"><p>  标签页2文本内容</p></div><div class="tab-pane" id="tab标签列表-3"><p>  标签页3文本内容</p></div></div></div><h3 id="引用站内链接"><a href="#引用站内链接" class="headerlink" title="引用站内链接"></a>引用站内链接</h3><p>可以通过如下语法引入站内文章的地址或链接：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">post_path</span> slug %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">post_link</span> slug [title] %&#125;</span></span><br></pre></td></tr></table></figure><p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的 Markdown 文件名。</p><p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p><p>如以下标签将会生成  </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> post_path Hex<span class="meta">o2</span> <span class="meta">%</span>&#125;</span><br></pre></td></tr></table></figure><p>而以下标签则会生成 <a href="/2020/12/31/Hexo2/" title="链接标题">链接标题</a></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">post_link</span> Hexo2 链接标题 %&#125;</span></span><br></pre></td></tr></table></figure><p>这种站内引用方式比直接使用 url 引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要 Markdown 文件名没有发生改变，引用链接都不会失效。</p><h3 id="插入-Swig-代码"><a href="#插入-Swig-代码" class="headerlink" title="插入 Swig 代码"></a>插入 Swig 代码</h3><p>如果需要在页面内插入 Swig 代码，包括原生 HTML 代码，JavaScript 脚本等，可以通过 raw 标签来禁止 Markdown 引擎渲染标签内的内容。语法如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span></span><br></pre></td></tr></table></figure><p>该标签通常用于在页面内引入三方脚本实现特殊功能，尤其是当该三方脚本尚无相关 hexo 插件支持的时候，可以通过写原生 Web 页面的形式引入脚本并编写实现逻辑。</p><h3 id="插入-Gist"><a href="#插入-Gist" class="headerlink" title="插入 Gist"></a>插入 Gist</h3><p>如果需要在页面内插入 Gist 上的代码片段时，可以使用如下标签:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>gist_id: Gist 仓库页面 url 中最后一段随机字符串</li><li>filename: Gist 中的文件名</li></ul><p>如果 Gist 中只有一个文件，可以不用指定 filename，也可以通过 JavaScript 脚本的形式直接引入，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 Gist 中有多个文件，可以在标签内输入 filename 来指定只引入某个文件，如果没有指定 filename，将会引入 Gist 中的所有文件。另外，引用 JavaScript 脚本形式无法精确控制只引入某一个文件，将会同时引入 Gist 中的所有文件。</p><p>如果指定了与 Gist 无法匹配的 filename，页面上将不会显示任何标签内容。所以，一般在 Gist 只有一个文件的情况下无需指定 filename。</p><p>在页面中引入 Gist 代码段将会同时从 github 服务器上下载脚本与 CSS 样式文件，由于国内访问 github 服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。</p><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><p>　　个人用的写作工具是<a href="https://typora.io/#windows">Typora</a>，Typora有关写作和图片处理经验可以参考<a href="https://cloud.tencent.com/developer/article/1600295">这篇文章</a>，这里就不多叙述了</p><h1 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h1><p>　　博客除了主页，还有很多其他页面，Next允许用户在菜单中添加自定义页面。这一部分主要是关于页面(page)。</p><p>至此如何使用框架也基本介绍完了，更详细的内容详见<a href="https://hexo.io/docs/">Hexo官方文档</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　在框架建立起来后，则接下来便是要学会如何使用，其中包括Hexo的命令包括初始化文件夹、新建博文、发布博文、启动本地服务器等等。同时学习如何使用一些小技巧，&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>【Hexo+GitHub搭建个人博客】一、框架建立</title>
    <link href="http://example.com/2020/12/31/Hexo1/"/>
    <id>http://example.com/2020/12/31/Hexo1/</id>
    <published>2020-12-31T02:50:00.000Z</published>
    <updated>2021-01-25T01:19:19.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　当今市场上有着众多创作平台如知乎、微信公众好号、简书，为啥还要这么麻烦的去搭建一个个人博客？我想自己的答案就是想有一个安静的地方记录生活吧。不用注册登录账号、不用注意内容审核、不用担心文章消失，即使没有读者，我个人还是沉浸其中。</p><p>　　对于博客的搭建，静态站点对于动态站点而言，有着相对较快的访问速度，能托管在 github 上简单又快捷，于是选择了目前流行且免费的 Hexo 框架</p><a id="more"></a><h1 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h1><p>　　在搭建前需要准备一下搭建环境，接下来的操作是在<strong>命令行</strong>中进行　　</p><h2 id="Github-的注册"><a href="#Github-的注册" class="headerlink" title="Github 的注册"></a>Github 的注册</h2><p>　　注册一个 <a href="https://github.com/join?source=login">Github</a> 账号　　</p><h2 id="Git-的下载与安装"><a href="#Git-的下载与安装" class="headerlink" title="Git 的下载与安装"></a>Git 的下载与安装</h2><p>　　<a href="https://git-scm.com/downloads">下载Git</a> 并进行安装，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">&quot;你的GitHub邮箱&quot;</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;你的GitHub用户名&quot;</span></span><br></pre></td></tr></table></figure><p>　　Git 是版本控制系统，通俗的说就是提交更改项目等操作的工具。Git 在提交更改的时候，会需要提交者的邮箱和用户名，这可以在命令行窗口通过以下命令来设置：，–global 代表全局配置，若以后想为单个项目配置，则在项目文件夹输入去掉–global 后的命令　　</p><h2 id="Node-js下载"><a href="#Node-js下载" class="headerlink" title="Node.js下载"></a>Node.js下载</h2><p>　　<a href="https://nodejs.org/en/download/">下载 Node.js</a> 并安装　　　　</p><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><p>　　在<strong>命令行</strong>中输入下面命令来安装 Hexo，安装完成后输入<code>hexo -v</code>验证是否安装成功。　　</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>　　-g表示全局安装，会将 Hexo 命令加入环境变量中，以使其在 cmd 下有效。</p><p>　　<strong>新建</strong>存放博客的目录，然后在<strong>该路径下执行</strong>初始化命令：　　</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">init</span></span><br></pre></td></tr></table></figure><p>　　执行完毕后，输入<code>dir</code>将会生成以下文件结构：　　</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       <span class="regexp">//</span>依赖安装目录</span><br><span class="line">├── scaffolds          <span class="regexp">//</span>模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         <span class="regexp">//</span>草稿模板</span><br><span class="line">|   ├── page.md          <span class="regexp">//</span>页面模板</span><br><span class="line">|   └── post.md          <span class="regexp">//</span>文章模板</span><br><span class="line">├── source             <span class="regexp">//</span>资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           <span class="regexp">//</span>文章目录</span><br><span class="line">├── themes             <span class="regexp">//</span>主题文件夹</span><br><span class="line">|   └── landscape        <span class="regexp">//</span>默认主题</span><br><span class="line">├── .gitignore         <span class="regexp">//</span>指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        <span class="regexp">//</span>站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br></pre></td></tr></table></figure><p>　　在根目录下执行如下命令或 <code>hexo s</code> 启动 hexo 的内置 Web 服务器 　　</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>　　该命令将会调用Markdown引擎解析项目中的博客内容生成网页资源，资源将会存于内存中，所以用户执行完命令之后在项目文件夹中是找不到相关的Web资源目录的。该命令还会启动一个简易的 Web服务器用于提供对内存中网页资源的访问（工作机制类似于webpack-dev-server），Web 服务器默认监听 4000 端口，用户可在浏览器中通过地址 <code>localhost:4000</code> 访问博客。</p><p><img src="https://z4a.net/images/2020/12/31/image539b863fea85a0b8.png" alt="Hexo默认首页"></p><p>　　当 4000 端口已被其他应用占用时，可以添加 -p / –port 参数来设置 Web 服务监听的端口号，如 <code>hexo s -p 8000</code></p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>　　当然现在这个页面太丑了，换一个比较入眼的主题，这里选择<code>Next</code>主题示例，在博客根目录右键打开<code>Git Bash here</code>，输入如下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/next-theme/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>　　等待下载完成，打开站点配置文件<code>_config.yml</code> 文件，将 <code>theme</code> 字段的值修改为 <code>next</code>，即：</p><figure class="highlight yml"><figcaption><span>/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>　　然后重启内在服务器 <code>hexo s</code> 即可看到新主题：</p><p><img src="https://z4a.net/images/2020/12/31/image4285b977a8308096.png" alt="Next主题"></p><figure class="highlight yml"><figcaption><span>/themes/next/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span>      <span class="comment">#选择Gemini风格</span></span><br></pre></td></tr></table></figure><h1 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h1><p>　　框架建立起来了，这时候则需要配置站点的信息，首先先介绍框架目录下比较重要的文件和文件夹：</p><ul><li>_config.yml :配置文件，配置了<strong>博客的各项设置</strong></li><li>source :资源文件夹，里面有所有的<strong>博文或是独立页面</strong></li><li>themes :主题文件夹，包含了一个或多个<strong>主题文件夹</strong></li><li>scaffolds :模版文件夹,新建文章时，Hexo 会根据文件夹里的<strong>模板</strong>来建立文件。</li></ul><h2 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h2><p>　　打开 <code>_config.yml 文件</code>，可以对站点进行配置，<code>#</code>后面表示注释　　</p><figure class="highlight yml"><figcaption><span>/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">chiayhon的小站</span>       <span class="comment"># 站点主题，标签页主题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;欢迎光临&#x27;</span>         <span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;渴望早睡晚起&#x27;</span>     <span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">chiayhon&#x27;s</span> <span class="string">blog</span>       <span class="comment"># 网站关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">chiayhon</span>                <span class="comment"># 作者名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>                 <span class="comment"># 语言设置为中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span>       <span class="comment"># 时区设为上海</span></span><br></pre></td></tr></table></figure><h2 id="博文字数统计"><a href="#博文字数统计" class="headerlink" title="博文字数统计"></a>博文字数统计</h2><p>　　先安装字数统计插件:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">word</span>-counter</span><br></pre></td></tr></table></figure><p>　　然后在博客配置文件末尾添加：</p><figure class="highlight yml"><figcaption><span>/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>    <span class="comment"># 帖子字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>    <span class="comment"># 预计阅读时间</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span>    <span class="comment"># 在页脚显示所有帖子总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span>    <span class="comment"># 在页脚显示所有帖子的阅读时间</span></span><br></pre></td></tr></table></figure><p>　　配置完博客如下：</p><p><img src="https://z4a.net/images/2020/12/31/3.png" alt="信息配置完成"></p><p>　　</p><div class="note success"><p>至此，一个最基本的框架已经被搭建起来了，框架建立篇到此结束，本框架版本是基于Hexo 5.3.0 + Node.js 12.13.0 + Git 2.23.0 + Next 8.1.0搭建的，不同版本可能会不兼容，若是安装出错需核对版本。</p></div>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　当今市场上有着众多创作平台如知乎、微信公众好号、简书，为啥还要这么麻烦的去搭建一个个人博客？我想自己的答案就是想有一个安静的地方记录生活吧。不用注册登录账号、不用注意内容审核、不用担心文章消失，即使没有读者，我个人还是沉浸其中。&lt;/p&gt;
&lt;p&gt;　　对于博客的搭建，静态站点对于动态站点而言，有着相对较快的访问速度，能托管在 github 上简单又快捷，于是选择了目前流行且免费的 Hexo 框架&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
